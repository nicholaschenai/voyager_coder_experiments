{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\nTests failed:\nNone",
    "state": null,
    "code": "\n\ndef replace_char(original: str, to_replace: str, replacement: str) -> str:\n    result = []\n    for char in original:\n        if (char == to_replace):\n            result.append(replacement)\n        else:\n            result.append(char)\n    return ''.join(result)\n",
    "full_code": "\n\ndef replace_char(original: str, to_replace: str, replacement: str) -> str:\n    result = []\n    for char in original:\n        if (char == to_replace):\n            result.append(replacement)\n        else:\n            result.append(char)\n    return ''.join(result)\n",
    "task_id": "Mbpp/474",
    "success": true,
    "critique": "",
    "reasoning": ""
}