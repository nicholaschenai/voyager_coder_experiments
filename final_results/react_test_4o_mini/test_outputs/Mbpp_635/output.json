{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nTests failed:\nNone",
    "state": null,
    "code": "\n\ndef heapify(arr, n, i):\n    largest = i\n    left = ((2 * i) + 1)\n    right = ((2 * i) + 2)\n    if ((left < n) and (arr[left] > arr[largest])):\n        largest = left\n    if ((right < n) and (arr[right] > arr[largest])):\n        largest = right\n    if (largest != i):\n        (arr[i], arr[largest]) = (arr[largest], arr[i])\n        heapify(arr, n, largest)\n\n\n\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(((n // 2) - 1), (- 1), (- 1)):\n        heapify(arr, n, i)\n    for i in range((n - 1), 0, (- 1)):\n        (arr[i], arr[0]) = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr\n",
    "full_code": "\n\ndef heapify(arr, n, i):\n    largest = i\n    left = ((2 * i) + 1)\n    right = ((2 * i) + 2)\n    if ((left < n) and (arr[left] > arr[largest])):\n        largest = left\n    if ((right < n) and (arr[right] > arr[largest])):\n        largest = right\n    if (largest != i):\n        (arr[i], arr[largest]) = (arr[largest], arr[i])\n        heapify(arr, n, largest)\n\n\n\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(((n // 2) - 1), (- 1), (- 1)):\n        heapify(arr, n, i)\n    for i in range((n - 1), 0, (- 1)):\n        (arr[i], arr[0]) = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr\n",
    "task_id": "Mbpp/635",
    "success": true,
    "critique": "",
    "reasoning": ""
}