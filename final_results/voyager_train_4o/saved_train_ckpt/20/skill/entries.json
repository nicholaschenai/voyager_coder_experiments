{
    "filter_even_numbers": {
        "code": "\n\ndef filter_even_numbers(input_list):\n    even_numbers = []\n    for number in input_list:\n        if ((number % 2) == 0):\n            even_numbers.append(number)\n    return even_numbers\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a new list containing only the even numbers from the original list.",
        "description": "\n[description for function: filter_even_numbers]\nThis function takes a list of numbers as input and iterates through each number to check if it is even. If a number is found to be even (i.e., divisible by 2 with no remainder), it is added to a new list. After processing all the numbers, the function returns the list containing only the even numbers. The output will be an array that excludes any odd numbers from the original input. This allows users to easily filter out even values from a mixed list of integers. The function effectively provides a simple way to identify and collect even numbers.\n\n[end of description]\n"
    },
    "count_string_occurrences": {
        "code": "\n\ndef count_string_occurrences(string_list):\n    count_dict = {}\n    for string in string_list:\n        if (string in count_dict):\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    return count_dict\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the number of times each string appears in the list.",
        "description": "\n[description for function: count_string_occurrences]\nThis function takes a list of strings as input and counts the occurrences of each unique string in that list. It initializes an empty dictionary to store the counts. As it iterates through the list, it checks if each string is already a key in the dictionary; if so, it increments the count, otherwise, it adds the string with a count of one. Finally, it returns the dictionary containing the strings and their corresponding counts. This allows for easy retrieval of how many times each string appears in the input list. The function effectively summarizes the frequency of each string in the provided list.\n\n[end of description]\n"
    },
    "group_strings_by_length": {
        "code": "\n\ndef group_strings_by_length(strings):\n    length_dict = {}\n    for string in strings:\n        length = len(string)\n        if (length in length_dict):\n            length_dict[length].append(string)\n        else:\n            length_dict[length] = [string]\n    return length_dict\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of strings and returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that length.",
        "description": "\n[description for function: group_strings_by_length]\nThis function takes a list of strings and organizes them into a dictionary where the keys are the lengths of the strings and the values are lists of strings that share the same length. It iterates through each string in the input list, calculates its length, and then adds it to the corresponding list in the dictionary. If a length key already exists, the string is appended to the existing list; otherwise, a new list is created for that length. Finally, the function returns the constructed dictionary, providing a clear grouping of strings by their lengths. This allows for easy access to all strings of a specific length. The output is a structured representation of the input strings based on their lengths.\n\n[end of description]\n"
    },
    "first_non_repeating_char": {
        "code": "\n\ndef first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = (char_count.get(char, 0) + 1)\n    for char in s:\n        if (char_count[char] == 1):\n            return char\n    return None\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns the first non-repeating character in it. If all characters repeat, return None.",
        "description": "\n[description for function: first_non_repeating_char]\nThis function takes a string as input and counts the occurrences of each character in it. It uses a dictionary to store the count of each character. After counting, it iterates through the string again to find the first character that appears only once. If such a character is found, it is returned as the result. If no non-repeating character exists, the function returns None. This effectively identifies the first unique character in the given string.\n\n[end of description]\n"
    },
    "find_pairs_with_sum": {
        "code": "from collections import Counter\n\ndef find_pairs_with_sum(nums, target):\n    from collections import Counter\n    num_count = Counter(nums)\n    unique_pairs = set()\n    for num in nums:\n        complement = (target - num)\n        if (complement in num_count):\n            if ((num == complement) and (num_count[num] < 2)):\n                continue\n            pair = (min(num, complement), max(num, complement))\n            unique_pairs.add(pair)\n    return sorted(list(unique_pairs))\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a list of all unique pairs (as tuples) that sum up to a given target integer. The pairs should be sorted in ascending order, and each pair should be sorted as well.",
        "description": "\n[description for function: find_pairs_with_sum]\nThis function takes a list of integers and a target sum as input, and it identifies all unique pairs of numbers from the list that add up to the target sum. It utilizes a counter to keep track of the occurrences of each number in the list. As it iterates through the numbers, it calculates the complement needed to reach the target sum and checks if it exists in the counter. If the number and its complement are the same, it ensures there are at least two occurrences of that number. The pairs are stored in a set to maintain uniqueness and are returned as a sorted list.\n\n[end of description]\n"
    },
    "longest_unique_substring": {
        "code": "\n\ndef longest_unique_substring(s):\n    char_set = set()\n    max_length = 0\n    start = 0\n    longest_substr = ''\n    for end in range(len(s)):\n        while (s[end] in char_set):\n            char_set.remove(s[start])\n            start += 1\n        char_set.add(s[end])\n        if (((end - start) + 1) > max_length):\n            max_length = ((end - start) + 1)\n            longest_substr = s[start:(end + 1)]\n    return longest_substr\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns the longest substring without repeating characters.",
        "description": "\n[description for function: longest_unique_substring]\nThis function takes a string as input and finds the longest substring that contains all unique characters. It uses a sliding window approach, maintaining a set of characters currently in the substring and adjusting the start index as needed to ensure uniqueness. As it iterates through the string, it updates the maximum length and the corresponding substring whenever a longer unique substring is found. The function ultimately returns the longest substring with all unique characters. It efficiently handles the input by ensuring that each character is processed only once. The result is a single substring that meets the criteria.\n\n[end of description]\n"
    },
    "find_common_elements": {
        "code": "\n\ndef find_common_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = (set1 & set2)\n    result = sorted(common_set)\n    return result\n",
        "dependencies": [],
        "task": "Write a Python function that takes two lists of integers and returns a list of their common elements. The result should not contain duplicates and should be sorted in ascending order.",
        "description": "\n[description for function: find_common_elements]\nThis function takes two lists as input and converts them into sets to eliminate duplicates. It then finds the intersection of these two sets, which contains the common elements. The resulting set of common elements is sorted in ascending order. Finally, the function returns this sorted list of common elements.\n\n[end of description]\n"
    },
    "bubble_sort": {
        "code": "\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range((n - 1)):\n        for j in range(((n - 1) - i)):\n            if (arr[j] > arr[(j + 1)]):\n                (arr[j], arr[(j + 1)]) = (arr[(j + 1)], arr[j])\n    return arr\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and sorts it in ascending order using the bubble sort algorithm. The function should return the sorted list.",
        "description": "\n[description for function: bubble_sort]\nThis function sorts a given list of numbers in ascending order using the bubble sort algorithm. It iterates through the list multiple times, comparing adjacent elements and swapping them if they are in the wrong order. The process is repeated until the entire list is sorted. The outer loop controls the number of passes, while the inner loop performs the comparisons and swaps. The function modifies the original list in place and returns the sorted list. Overall, it efficiently organizes the elements by repeatedly \"bubbling\" the largest unsorted element to its correct position.\n\n[end of description]\n"
    },
    "reverse_list": {
        "code": "\n\ndef reverse_list(input_list):\n    return input_list[::(- 1)]\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a new list with the elements in reverse order.",
        "description": "\n[description for function: reverse_list]\nThis function takes a list as input and returns a new list that contains the elements of the input list in reverse order. It utilizes Python's slicing feature to achieve this by specifying a step of -1. The result is a reversed version of the original list without modifying the input list itself. This approach is concise and efficient for reversing lists. The function can handle lists of any data type, including mixed types. Overall, it provides a simple way to reverse the order of elements in a list.\n\n[end of description]\n"
    },
    "find_gcd_of_list": {
        "code": "\n\ndef gcd(a, b):\n    while (b != 0):\n        (a, b) = (b, (a % b))\n    return a\n\n\n\n\ndef find_gcd_of_list(numbers):\n    if (not numbers):\n        return None\n    current_gcd = numbers[0]\n    for num in numbers[1:]:\n        current_gcd = gcd(current_gcd, num)\n    return current_gcd\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns the greatest common divisor (GCD) of the numbers in the list. Use the Euclidean algorithm to find the GCD.",
        "description": "\n[description for function: find_gcd_of_list]\nThis function calculates the greatest common divisor (GCD) of a list of numbers by iteratively applying the GCD calculation to each element in the list, starting with the first number as the initial GCD. If the input list is empty, it returns None. It initializes the current GCD with the first number and then updates it by finding the GCD with each subsequent number in the list. Finally, it returns the computed GCD for the entire list.\n\n[end of description]\n"
    },
    "remove_vowels": {
        "code": "\n\ndef remove_vowels(input_string):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in input_string:\n        if (char not in vowels):\n            result.append(char)\n    return ''.join(result)\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns a new string with all the vowels removed. The function should be case-insensitive, meaning it should remove both uppercase and lowercase vowels.",
        "description": "\n[description for function: remove_vowels]\nThis function takes a string as input and removes all vowels from it, including both uppercase and lowercase letters. It initializes an empty list to store the characters that are not vowels. As it iterates through each character in the input string, it checks if the character is not a vowel and, if so, appends it to the result list. Finally, it joins the characters in the result list into a single string and returns that string without vowels.\n\n[end of description]\n"
    },
    "common_elements": {
        "code": "\n\ndef common_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = (set1 & set2)\n    return list(common_set)\n",
        "dependencies": [],
        "task": "Write a Python function that takes two lists of integers and returns a list of integers that are present in both lists, without duplicates. Use set operations to achieve this.",
        "description": "\n[description for function: common_elements]\nThis function takes two lists as input and converts them into sets to eliminate any duplicate values. It then computes the intersection of these two sets to identify the common elements present in both lists. Finally, it returns the common elements as a new list. The use of sets ensures that the operation is efficient and that the result contains unique values. The output will only include elements that appear in both input lists. Overall, it provides a straightforward way to find shared items between two collections.\n\n[end of description]\n"
    },
    "simulate_stack_operations": {
        "code": "\n\ndef simulate_stack_operations(operations):\n    stack = []\n    results = []\n    for operation in operations:\n        if operation.startswith('push'):\n            (_, value) = operation.split()\n            stack.append(int(value))\n        elif (operation == 'pop'):\n            if stack:\n                results.append(stack.pop())\n            else:\n                results.append(None)\n        elif (operation == 'peek'):\n            if stack:\n                results.append(stack[(- 1)])\n            else:\n                results.append(None)\n    return results\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of operations (as strings) and simulates a stack using a list. The operations can be 'push X' to push an integer X onto the stack, 'pop' to remove the top element, and 'peek' to return the top element without removing it. The function should return a list of results from the 'pop' and 'peek' operations.",
        "description": "\n[description for function: simulate_stack_operations]\nThis function simulates a series of stack operations based on a list of commands. It initializes an empty stack and processes each operation, which can be to push a value onto the stack, pop the top value off the stack, or peek at the top value without removing it. When pushing, it converts the value to an integer before adding it to the stack. If a pop or peek operation is attempted on an empty stack, it appends `None` to the results list. The function returns a list of results corresponding to the pop and peek operations. Overall, it effectively manages stack behavior and provides feedback on the operations performed.\n\n[end of description]\n"
    },
    "symmetric_difference": {
        "code": "\n\ndef symmetric_difference(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    result_set = (set1 ^ set2)\n    result_list = sorted(result_set)\n    return result_list\n",
        "dependencies": [],
        "task": "Write a Python function that takes two lists of integers and returns a list of integers that are present in either of the lists but not in both. The result should not contain duplicates and should be sorted in ascending order.",
        "description": "\n[description for function: symmetric_difference]\nThis function calculates the symmetric difference between two lists by converting them into sets, which allows for the identification of elements that are unique to each set. It uses the symmetric difference operator to find elements that are in either of the sets but not in both. The resulting set is then sorted to produce a list of the unique elements in ascending order. Finally, the function returns this sorted list. This provides a clear and efficient way to determine the unique elements from two input lists.\n\n[end of description]\n"
    },
    "count_integers": {
        "code": "\n\ndef count_integers(int_list):\n    count_dict = {}\n    for num in int_list:\n        if (num in count_dict):\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return count_dict\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. This will help practice using dictionaries for counting occurrences.",
        "description": "\n[description for function: count_integers]\nThis function takes a list of integers as input and counts the occurrences of each integer in the list. It initializes an empty dictionary to store the counts. As it iterates through the list, it updates the count for each integer, either by incrementing the existing count or initializing it to one if the integer is encountered for the first time. Finally, it returns the dictionary containing the integers and their corresponding counts. This allows for a quick overview of how many times each integer appears in the input list. The function effectively provides a frequency distribution of the integers.\n\n[end of description]\n"
    },
    "find_primes_less_than": {
        "code": "\n\ndef find_primes_less_than(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, (int((num ** 0.5)) + 1)):\n            if ((num % i) == 0):\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
        "dependencies": [],
        "task": "Write a Python function that takes an integer n and returns a list of all prime numbers less than n. This will help you practice loops, conditionals, and understanding of prime numbers.",
        "description": "\n[description for function: find_primes_less_than]\nThis function generates a list of all prime numbers that are less than a specified integer, n. It iterates through each number starting from 2 up to n-1 and checks if the number is prime by testing divisibility with all integers up to its square root. If a number is found to be prime, it is added to the list of primes. The function ultimately returns the complete list of prime numbers found. It efficiently determines primality by reducing the number of divisibility checks needed. The result is a collection of prime numbers that can be used for various mathematical applications.\n\n[end of description]\n"
    },
    "is_pattern_in_string": {
        "code": "\n\ndef is_pattern_in_string(main_string, pattern):\n    return (pattern in main_string)\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and a pattern (both strings) and returns True if the pattern is found in the string, and False otherwise. The function should perform a simple substring search.",
        "description": "\n[description for function: is_pattern_in_string]\nThis function checks if a specified pattern exists within a given main string. It takes two arguments: the main string and the pattern to search for. The function utilizes the 'in' operator to determine if the pattern is a substring of the main string. It returns a boolean value, either True or False, based on the presence of the pattern. This allows for quick and efficient substring searching. Overall, it provides a straightforward way to verify the existence of a sequence of characters within another string.\n\n[end of description]\n"
    },
    "recursive_factorial": {
        "code": "\n\ndef recursive_factorial(n):\n    if (n == 0):\n        return 1\n    else:\n        return (n * recursive_factorial((n - 1)))\n",
        "dependencies": [],
        "task": "Write a Python function that calculates the factorial of a given non-negative integer using recursion. The function should return the factorial value.",
        "description": "\n[description for function: recursive_factorial]\nThis function calculates the factorial of a non-negative integer using recursion. If the input is zero, it returns 1, as the factorial of zero is defined to be 1. For any positive integer, it multiplies the integer by the factorial of the integer minus one, effectively reducing the problem size with each recursive call. The process continues until it reaches the base case of zero. The final result is the product of all integers from the input down to one. This approach elegantly demonstrates the concept of recursion in programming.\n\n[end of description]\n"
    }
}