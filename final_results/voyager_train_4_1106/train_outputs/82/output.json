{
    "env_feedback": "Tests passed:\nassert find_max_length_zero_sum_subarray([1, -1, 3, 4, -3, -4]) == 6\nassert find_max_length_zero_sum_subarray([1, 2, 3]) == 0\n\nTests failed:\nassert find_max_length_zero_sum_subarray([1, 2, -3, 3, 1, -4, 2]) == 4 # output: 6",
    "state": null,
    "code": "\n\ndef find_max_length_zero_sum_subarray(nums):\n    sum_index_map = {}\n    cumulative_sum = 0\n    max_length = 0\n    for (index, value) in enumerate(nums):\n        cumulative_sum += value\n        if (cumulative_sum == 0):\n            max_length = max(max_length, (index + 1))\n        if (cumulative_sum in sum_index_map):\n            subarray_length = (index - sum_index_map[cumulative_sum])\n            max_length = max(max_length, subarray_length)\n        else:\n            sum_index_map[cumulative_sum] = index\n    return max_length\n",
    "full_code": "\n\ndef find_max_length_zero_sum_subarray(nums):\n    sum_index_map = {}\n    cumulative_sum = 0\n    max_length = 0\n    for (index, value) in enumerate(nums):\n        cumulative_sum += value\n        if (cumulative_sum == 0):\n            max_length = max(max_length, (index + 1))\n        if (cumulative_sum in sum_index_map):\n            subarray_length = (index - sum_index_map[cumulative_sum])\n            max_length = max(max_length, subarray_length)\n        else:\n            sum_index_map[cumulative_sum] = index\n    return max_length\n",
    "task_id": "82",
    "reasoning": "The implementation incorrectly updates the max_length even when a zero-sum subarray is not the longest. The failed test case indicates that the function returns a longer subarray length than expected, which includes non-zero-sum segments.",
    "success": false,
    "critique": "The implementation should not update the max_length when the cumulative_sum is zero unless it is indeed the longest zero-sum subarray found so far. To fix this, the function should update the sum_index_map with the current index only when the cumulative_sum is not already in the map. This will prevent overwriting the starting index of the first zero-sum subarray that contributes to the cumulative_sum."
}