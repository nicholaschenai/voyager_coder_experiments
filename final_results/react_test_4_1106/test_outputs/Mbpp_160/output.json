{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_solution(2, 3, 7) == (2, 1)\n\nTests failed:\nNone",
    "state": null,
    "code": "\n\ndef extended_gcd(a, b):\n    if (b == 0):\n        return (a, 1, 0)\n    (gcd, x1, y1) = extended_gcd(b, (a % b))\n    x = y1\n    y = (x1 - ((a // b) * y1))\n    return (gcd, x, y)\n\n\n\n\ndef find_solution(a, b, n):\n    (gcd, x0, y0) = extended_gcd(a, b)\n    if ((n % gcd) != 0):\n        return None\n    x = (x0 * (n // gcd))\n    y = (y0 * (n // gcd))\n    while ((x < 0) or (y < 0)):\n        x += (b // gcd)\n        y -= (a // gcd)\n    return (x, y)\n",
    "full_code": "\n\ndef extended_gcd(a, b):\n    if (b == 0):\n        return (a, 1, 0)\n    (gcd, x1, y1) = extended_gcd(b, (a % b))\n    x = y1\n    y = (x1 - ((a // b) * y1))\n    return (gcd, x, y)\n\n\n\n\ndef find_solution(a, b, n):\n    (gcd, x0, y0) = extended_gcd(a, b)\n    if ((n % gcd) != 0):\n        return None\n    x = (x0 * (n // gcd))\n    y = (y0 * (n // gcd))\n    while ((x < 0) or (y < 0)):\n        x += (b // gcd)\n        y -= (a // gcd)\n    return (x, y)\n",
    "task_id": "Mbpp/160",
    "success": true,
    "critique": "",
    "reasoning": ""
}