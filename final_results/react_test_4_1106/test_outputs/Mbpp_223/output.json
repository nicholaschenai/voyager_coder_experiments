{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nTests failed:\nNone",
    "state": null,
    "code": "\n\ndef is_majority(arr, n, element):\n\n    def find_first_occurrence(arr, element):\n        (low, high) = (0, (len(arr) - 1))\n        while (low <= high):\n            mid = ((low + high) // 2)\n            if (arr[mid] < element):\n                low = (mid + 1)\n            elif (arr[mid] > element):\n                high = (mid - 1)\n            else:\n                if ((mid == 0) or (arr[(mid - 1)] != element)):\n                    return mid\n                high = (mid - 1)\n        return (- 1)\n\n    def find_last_occurrence(arr, element, first_index):\n        (low, high) = (first_index, (len(arr) - 1))\n        while (low <= high):\n            mid = ((low + high) // 2)\n            if (arr[mid] < element):\n                low = (mid + 1)\n            elif (arr[mid] > element):\n                high = (mid - 1)\n            else:\n                if ((mid == (len(arr) - 1)) or (arr[(mid + 1)] != element)):\n                    return mid\n                low = (mid + 1)\n        return (- 1)\n    first_index = find_first_occurrence(arr, element)\n    if (first_index == (- 1)):\n        return False\n    last_index = find_last_occurrence(arr, element, first_index)\n    count = ((last_index - first_index) + 1)\n    return (count > (n / 2))\n",
    "full_code": "\n\ndef is_majority(arr, n, element):\n\n    def find_first_occurrence(arr, element):\n        (low, high) = (0, (len(arr) - 1))\n        while (low <= high):\n            mid = ((low + high) // 2)\n            if (arr[mid] < element):\n                low = (mid + 1)\n            elif (arr[mid] > element):\n                high = (mid - 1)\n            else:\n                if ((mid == 0) or (arr[(mid - 1)] != element)):\n                    return mid\n                high = (mid - 1)\n        return (- 1)\n\n    def find_last_occurrence(arr, element, first_index):\n        (low, high) = (first_index, (len(arr) - 1))\n        while (low <= high):\n            mid = ((low + high) // 2)\n            if (arr[mid] < element):\n                low = (mid + 1)\n            elif (arr[mid] > element):\n                high = (mid - 1)\n            else:\n                if ((mid == (len(arr) - 1)) or (arr[(mid + 1)] != element)):\n                    return mid\n                low = (mid + 1)\n        return (- 1)\n    first_index = find_first_occurrence(arr, element)\n    if (first_index == (- 1)):\n        return False\n    last_index = find_last_occurrence(arr, element, first_index)\n    count = ((last_index - first_index) + 1)\n    return (count > (n / 2))\n",
    "task_id": "Mbpp/223",
    "success": true,
    "critique": "",
    "reasoning": ""
}