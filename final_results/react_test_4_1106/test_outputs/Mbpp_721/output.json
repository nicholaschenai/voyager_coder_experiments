{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\nTests failed:\nNone",
    "state": null,
    "code": "\n\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]\n    dp[0][0] = (matrix[0][0], 1)\n    for i in range(N):\n        for j in range(N):\n            if ((i == 0) and (j == 0)):\n                continue\n            from_above = (dp[(i - 1)][j] if (i > 0) else (0, 0))\n            from_left = (dp[i][(j - 1)] if (j > 0) else (0, 0))\n            (max_avg, max_total, max_count) = (0, 0, 0)\n            if (from_above[1] != 0):\n                avg_from_above = ((from_above[0] + matrix[i][j]) / (from_above[1] + 1))\n                if (avg_from_above > max_avg):\n                    (max_avg, max_total, max_count) = (avg_from_above, (from_above[0] + matrix[i][j]), (from_above[1] + 1))\n            if (from_left[1] != 0):\n                avg_from_left = ((from_left[0] + matrix[i][j]) / (from_left[1] + 1))\n                if (avg_from_left > max_avg):\n                    (max_avg, max_total, max_count) = (avg_from_left, (from_left[0] + matrix[i][j]), (from_left[1] + 1))\n            dp[i][j] = (max_total, max_count)\n    (total_cost, count) = dp[(N - 1)][(N - 1)]\n    return (total_cost / count)\n",
    "full_code": "\n\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]\n    dp[0][0] = (matrix[0][0], 1)\n    for i in range(N):\n        for j in range(N):\n            if ((i == 0) and (j == 0)):\n                continue\n            from_above = (dp[(i - 1)][j] if (i > 0) else (0, 0))\n            from_left = (dp[i][(j - 1)] if (j > 0) else (0, 0))\n            (max_avg, max_total, max_count) = (0, 0, 0)\n            if (from_above[1] != 0):\n                avg_from_above = ((from_above[0] + matrix[i][j]) / (from_above[1] + 1))\n                if (avg_from_above > max_avg):\n                    (max_avg, max_total, max_count) = (avg_from_above, (from_above[0] + matrix[i][j]), (from_above[1] + 1))\n            if (from_left[1] != 0):\n                avg_from_left = ((from_left[0] + matrix[i][j]) / (from_left[1] + 1))\n                if (avg_from_left > max_avg):\n                    (max_avg, max_total, max_count) = (avg_from_left, (from_left[0] + matrix[i][j]), (from_left[1] + 1))\n            dp[i][j] = (max_total, max_count)\n    (total_cost, count) = dp[(N - 1)][(N - 1)]\n    return (total_cost / count)\n",
    "task_id": "Mbpp/721",
    "success": true,
    "critique": "",
    "reasoning": ""
}