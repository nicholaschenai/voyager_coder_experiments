{"date": "2024-11-20 07:54", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\n\ndef is_palindrome(n):\n    return (str(n) == str(n)[::(- 1)])\n\n\n\n\ndef next_smallest_palindrome(n):\n    n += 1\n    while (not is_palindrome(n)):\n        n += 1\n    return n\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\n\ndef sort_sublists(list_of_lists):\n    sorted_lists = []\n    for sublist in list_of_lists:\n        sorted_lists.append(sorted(sublist))\n    return sorted_lists\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\n\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_case_str = ''.join((word.capitalize() for word in words))\n    return camel_case_str\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["___python_program"]]}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\n\ndef eulerian_num(n, m):\n    A = [([0] * (n + 1)) for _ in range((n + 1))]\n    A[0][0] = 1\n    for i in range(1, (n + 1)):\n        A[i][0] = 1\n    for i in range(1, (n + 1)):\n        for j in range(1, i):\n            A[i][j] = (((i - j) * A[(i - 1)][j]) + ((j + 1) * A[(i - 1)][(j - 1)]))\n    return A[n][m]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\n\ndef count(bool_list):\n    return sum(bool_list)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\n\ndef add_lists(lst, tup):\n    lst_as_tuple = tuple(lst)\n    result = (tup + lst_as_tuple)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\n\ndef merge_sorted_list(list1, list2, list3):\n    combined_list = ((list1 + list2) + list3)\n    sorted_list = sorted(combined_list)\n    return sorted_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\n\ndef kth_element(arr, k):\n    return arr[(k - 1)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\n\ndef odd_Equivalent(binary_string, rotations):\n    odd_count = 0\n    for _ in range(rotations):\n        binary_string = (binary_string[(- 1)] + binary_string[:(- 1)])\n        if ((int(binary_string, 2) % 2) != 0):\n            odd_count += 1\n    return odd_count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["10000100110011", 5]]}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\n\ndef remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if ((first_index != (- 1)) and (last_index != (- 1))):\n        return ((s[:first_index] + s[(first_index + 1):last_index]) + s[(last_index + 1):])\n    return s\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\n\ndef search(arr):\n    (left, right) = (0, (len(arr) - 1))\n    while (left < right):\n        mid = (left + ((right - left) // 2))\n        if ((mid % 2) == 0):\n            if (arr[mid] == arr[(mid + 1)]):\n                left = (mid + 2)\n            else:\n                right = mid\n        elif (arr[mid] == arr[(mid - 1)]):\n            left = (mid + 1)\n        else:\n            right = (mid - 1)\n    return arr[left]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=(lambda row: sum(row)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\n\ndef common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for inner_list in nested_lists[1:]:\n        common_elements.intersection_update(inner_list)\n    return list(common_elements)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\n\ndef string_to_list(input_string):\n    return input_string.split()\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\n\ndef tuple_to_int(tup):\n    concatenated_string = ''.join((str(i) for i in tup))\n    return int(concatenated_string)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\n\ndef max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for (a, b) in tuples_list:\n        product = abs((a * b))\n        if (product > max_product):\n            max_product = product\n    return max_product\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\n\ndef multiply_int(a: int, b: int) -> int:\n    return (a * b)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\n\ndef magic_square_test(matrix):\n    n = len(matrix)\n    if any(((len(row) != n) for row in matrix)):\n        return False\n    magic_constant = sum(matrix[0])\n    for row in matrix:\n        if (sum(row) != magic_constant):\n            return False\n    for col in range(n):\n        if (sum((matrix[row][col] for row in range(n))) != magic_constant):\n            return False\n    if (sum((matrix[i][i] for i in range(n))) != magic_constant):\n        return False\n    if (sum((matrix[i][((n - 1) - i)] for i in range(n))) != magic_constant):\n        return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\n\ndef long_words(n, sentence):\n    words = sentence.split()\n    long_words_list = [word for word in words if (len(word) > n)]\n    return long_words_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\n\ndef find_length(binary_string):\n    max_diff = 0\n    current_sum = 0\n    for char in binary_string:\n        if (char == '0'):\n            current_sum += 1\n        else:\n            current_sum -= 1\n        max_diff = max(max_diff, current_sum)\n        if (current_sum < 0):\n            current_sum = 0\n    return max_diff\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\n\ndef max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if (item in frequency):\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = None\n    max_count = 0\n    for (item, count) in frequency.items():\n        if (count > max_count):\n            max_count = count\n            max_item = item\n    return max_item\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\n\ndef hexagonal_num(n):\n    return (n * ((2 * n) - 1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\n\ndef tup_string(tup):\n    return ''.join(tup)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\n\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    vowel_list = [char for char in s if (char in vowels)]\n    vowel_list.reverse()\n    result = []\n    vowel_index = 0\n    for char in s:\n        if (char in vowels):\n            result.append(vowel_list[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    return ''.join(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\n\ndef sum_negativenum(numbers):\n    total = 0\n    for num in numbers:\n        if (num < 0):\n            total += num\n    return total\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_counter = 0\n    non_zero_counter = 0\n    for num in arr:\n        if (num == 0):\n            zero_counter += 1\n        else:\n            non_zero_counter += 1\n    if (non_zero_counter > 0):\n        return (zero_counter / non_zero_counter)\n    else:\n        return 0\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if (n <= 0):\n        return False\n    while (n > 0):\n        power_of_two = 1\n        while (power_of_two <= n):\n            power_of_two <<= 1\n        power_of_two >>= 1\n        n -= power_of_two\n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[123456789]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return ((2 * math.pi) * radius)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\n\ndef extract_singly(list_of_tuples):\n    unique_numbers = set()\n    for tup in list_of_tuples:\n        unique_numbers.update(tup)\n    return unique_numbers\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if (list1[i] == list2[i] == list3[i]):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\n\ndef pancake_sort(arr):\n\n    def flip(sublist, k):\n        return (sublist[:k][::(- 1)] + sublist[k:])\n    n = len(arr)\n    for i in range(n, 1, (- 1)):\n        max_index = arr.index(max(arr[0:i]))\n        if (max_index != (i - 1)):\n            if (max_index != 0):\n                arr = flip(arr, (max_index + 1))\n            arr = flip(arr, i)\n    return arr\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\n\ndef find_Volume(base, height, length):\n    base_area = ((0.5 * base) * height)\n    volume = (base_area * length)\n    return volume\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\n\ndef max_Abs_Diff(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    difference = (max_val - min_val)\n    return difference\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return (re.fullmatch(pattern, s) is not None)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\n\ndef remove_elements(list1, list2):\n    return [element for element in list1 if (element not in list2)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\n\ndef count_char_position(s):\n    count = 0\n    s = s.lower()\n    for (index, char) in enumerate(s):\n        position = ((ord(char) - ord('a')) + 1)\n        if (position == (index + 1)):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\n\ndef find_even_pair(lst):\n    count_even = sum((1 for x in lst if ((x % 2) == 0)))\n    count_odd = (len(lst) - count_even)\n    even_pairs = ((count_even * (count_even - 1)) // 2)\n    odd_pairs = ((count_odd * (count_odd - 1)) // 2)\n    return (even_pairs + odd_pairs)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\n\ndef next_power_of_2(n):\n    if (n <= 0):\n        return 1\n    n -= 1\n    n |= (n >> 1)\n    n |= (n >> 2)\n    n |= (n >> 4)\n    n |= (n >> 8)\n    n |= (n >> 16)\n    n |= (n >> 32)\n    return (n + 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\n\ndef frequency(lst, num):\n    count = 0\n    for element in lst:\n        if (element == num):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\n\ndef square_perimeter(side_length):\n    return (4 * side_length)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\n\ndef perimeter_pentagon(side_length):\n    return (side_length * 5)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\n\ndef sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:(end_index + 1)])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\n\ndef count_occurance(input_string):\n    count = 0\n    substring = 'std'\n    index = 0\n    while (index < len(input_string)):\n        index = input_string.find(substring, index)\n        if (index == (- 1)):\n            break\n        count += 1\n        index += len(substring)\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\n\ndef remove_dirty_chars(str1, str2):\n    return ''.join((char for char in str1 if (char not in str2)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\n\ndef similar_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\n\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if (num in seen):\n            return True\n        seen.add(num)\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\n\ndef is_woodall(num):\n    n = 1\n    while True:\n        woodall_number = ((n * (2 ** n)) - 1)\n        if (woodall_number == num):\n            return True\n        elif (woodall_number > num):\n            return False\n        n += 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\n\ndef check_type(tup):\n    if (not tup):\n        return True\n    first_type = type(tup[0])\n    for element in tup:\n        if (type(element) != first_type):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\n\ndef is_majority(arr, n, element):\n\n    def find_first_occurrence(arr, element):\n        (low, high) = (0, (len(arr) - 1))\n        while (low <= high):\n            mid = ((low + high) // 2)\n            if (arr[mid] < element):\n                low = (mid + 1)\n            elif (arr[mid] > element):\n                high = (mid - 1)\n            else:\n                if ((mid == 0) or (arr[(mid - 1)] != element)):\n                    return mid\n                high = (mid - 1)\n        return (- 1)\n\n    def find_last_occurrence(arr, element, first_index):\n        (low, high) = (first_index, (len(arr) - 1))\n        while (low <= high):\n            mid = ((low + high) // 2)\n            if (arr[mid] < element):\n                low = (mid + 1)\n            elif (arr[mid] > element):\n                high = (mid - 1)\n            else:\n                if ((mid == (len(arr) - 1)) or (arr[(mid + 1)] != element)):\n                    return mid\n                low = (mid + 1)\n        return (- 1)\n    first_index = find_first_occurrence(arr, element)\n    if (first_index == (- 1)):\n        return False\n    last_index = find_last_occurrence(arr, element, first_index)\n    count = ((last_index - first_index) + 1)\n    return (count > (n / 2))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\n\ndef odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if ((i % 2) == 0)])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\n\ndef replace_blank(input_string, replacement_char):\n    modified_string = input_string.replace(' ', replacement_char)\n    return modified_string\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return (((2 * math.pi) * radius) * height)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\n\ndef larg_nnum(input_list, n):\n    sorted_list = sorted(input_list, reverse=True)\n    largest_items = sorted_list[:n]\n    return largest_items\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\n\ndef sum_series(n):\n    total_sum = 0\n    for i in range(((n // 2) + 1)):\n        term = (n - (2 * i))\n        if (term >= 0):\n            total_sum += term\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\n\ndef volume_cube(side_length):\n    return (side_length ** 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\n\ndef even_bit_set_number(num):\n    for i in range(32):\n        if ((i % 2) == 0):\n            num |= (1 << i)\n    return num\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return ((n * (n + 1)) // 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\n\ndef check_occurences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        if (tup in occurrences):\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\n\ndef get_total_number_of_sequences(m, n, memo=None):\n    if (memo is None):\n        memo = {}\n    if ((m, n) in memo):\n        return memo[(m, n)]\n    if (n == 0):\n        return 1\n    total_sequences = 0\n    max_next = (m // (2 ** (n - 1)))\n    for x in range(1, (max_next + 1)):\n        total_sequences += get_total_number_of_sequences(m, (n - 1), memo)\n    memo[(m, n)] = total_sequences\n    return total_sequences\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[50, 5]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\n\ndef sum(a, b):\n    smaller = min(a, b)\n    sum_common = 0\n    for i in range(1, (smaller + 1)):\n        if (((a % i) == 0) and ((b % i) == 0)):\n            sum_common += i\n    return sum_common\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321, 123456789]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\n\ndef count_charac(s: str) -> int:\n    return len(s)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\n\ndef replace_list(list1, list2):\n    list1 = list1[:(- 1)]\n    list1 += list2\n    return list1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\n\ndef count_X(tup, element):\n    count = 0\n    for item in tup:\n        if (item == element):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n: int) -> int:\n    root = math.isqrt(n)\n    next_root = (root + 1)\n    return (next_root ** 2)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\n\ndef max_sum(arr):\n    n = len(arr)\n    inc_sum = arr.copy()\n    dec_sum = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if (arr[j] < arr[i]):\n                inc_sum[i] = max(inc_sum[i], (inc_sum[j] + arr[i]))\n    for i in range((n - 2), (- 1), (- 1)):\n        for j in range((n - 1), i, (- 1)):\n            if (arr[j] < arr[i]):\n                dec_sum[i] = max(dec_sum[i], (dec_sum[j] + arr[i]))\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, ((inc_sum[i] + dec_sum[i]) - arr[i]))\n    return max_bitonic_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    if isinstance(z, int):\n        z = complex(z, 0)\n    return cmath.polar(z)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\n\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\n\ndef count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\n\ndef lps(s):\n    n = len(s)\n    dp = [([0] * n) for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, (n + 1)):\n        for i in range(((n - length) + 1)):\n            j = ((i + length) - 1)\n            if (s[i] == s[j]):\n                dp[i][j] = (dp[(i + 1)][(j - 1)] + 2)\n            else:\n                dp[i][j] = max(dp[(i + 1)][j], dp[i][(j - 1)])\n    return dp[0][(n - 1)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\n\ndef extended_gcd(a, b):\n    if (b == 0):\n        return (a, 1, 0)\n    (gcd, x1, y1) = extended_gcd(b, (a % b))\n    x = y1\n    y = (x1 - ((a // b) * y1))\n    return (gcd, x, y)\n\n\n\n\ndef find_solution(a, b, n):\n    (gcd, x0, y0) = extended_gcd(a, b)\n    if ((n % gcd) != 0):\n        return None\n    x = (x0 * (n // gcd))\n    y = (y0 * (n // gcd))\n    while ((x < 0) or (y < 0)):\n        x += (b // gcd)\n        y -= (a // gcd)\n    return (x, y)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 13, 17]], "plus_fail_tests": [[25, 10, 500]]}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\n\ndef sum_of_proper_divisors(n):\n    total = 0\n    for i in range(1, ((n // 2) + 1)):\n        if ((n % i) == 0):\n            total += i\n    return total\n\n\n\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    for num in range(1, (limit + 1)):\n        partner = sum_of_proper_divisors(num)\n        if ((partner != num) and (sum_of_proper_divisors(partner) == num)):\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9999]], "plus_fail_tests": [[10000]]}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\n\ndef split_two_parts(lst, L):\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\n\ndef division_elements(tuple1, tuple2):\n    if (len(tuple1) != len(tuple2)):\n        raise ValueError('Tuples must be of the same length')\n    result = []\n    for (a, b) in zip(tuple1, tuple2):\n        if (b == 0):\n            raise ValueError('Division by zero is not allowed')\n        result.append((a / b))\n    return tuple(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\n\ndef maximize_elements(tuple1, tuple2):\n    result = []\n    for (inner1, inner2) in zip(tuple1, tuple2):\n        max_tuple = tuple((max(a, b) for (a, b) in zip(inner1, inner2)))\n        result.append(max_tuple)\n    return tuple(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\n\ndef dog_age(human_years):\n    if (human_years <= 2):\n        return (human_years * 10.5)\n    else:\n        return (21 + ((human_years - 2) * 4))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\n\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\n\ndef count_Primes_nums(n):\n    if (n < 2):\n        return 0\n\n    def is_prime(num):\n        if (num < 2):\n            return False\n        for i in range(2, (int((num ** 0.5)) + 1)):\n            if ((num % i) == 0):\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\n\ndef lateralsurface_cube(side_length):\n    return (4 * (side_length ** 2))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\n\ndef sum_even_and_even_index(lst):\n    total = 0\n    for (index, value) in enumerate(lst):\n        if (((index % 2) == 0) and ((value % 2) == 0)):\n            total += value\n    return total\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\n\ndef list_split(input_list, n):\n    result = []\n    for i in range(n):\n        sublist = [input_list[j] for j in range(i, len(input_list), n)]\n        result.append(sublist)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\n\ndef ascii_value(char: str) -> int:\n    return ord(char)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\n\ndef find_star_num(n):\n    return (((6 * n) * (n - 1)) + 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\n\ndef square_Sum(n):\n    total = 0\n    for i in range(1, (n + 1)):\n        odd_number = ((2 * i) - 1)\n        total += (odd_number ** 2)\n    return total\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\n\ndef rear_extract(tuples_list):\n    return [t[(- 1)] for t in tuples_list]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\n\ndef dict_filter(input_dict, n):\n    filtered_dict = {key: value for (key, value) in input_dict.items() if (value >= n)}\n    return filtered_dict\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\n\ndef substract_elements(tuple1, tuple2):\n    if (len(tuple1) != len(tuple2)):\n        raise ValueError('Tuples must be of the same length')\n    result = tuple(((tuple1[i] - tuple2[i]) for i in range(len(tuple1))))\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    volume = ((math.pi * (radius ** 2)) * height)\n    return volume\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "from math import factorial\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    total_sum = 0\n    for k in range(0, (n + 1), 2):\n        total_sum += (factorial(n) // (factorial(k) * factorial((n - k))))\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\n\ndef count_first_elements(input_tuple):\n    for (index, element) in enumerate(input_tuple):\n        if isinstance(element, tuple):\n            return index\n    return 0\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\n\ndef is_num_decagonal(n):\n    return (n * ((4 * n) - 3))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\n\ndef all_unique(lst):\n    return (len(lst) == len(set(lst)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\n\ndef sequential_search(array, element):\n    for (index, value) in enumerate(array):\n        if (value == element):\n            return (True, index)\n    return (False, (- 1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\n\ndef sub_list(list1, list2):\n    return [(a - b) for (a, b) in zip(list1, list2)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "from collections import Counter\n\ndef validate(n):\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for (digit, count) in digit_count.items():\n        if (count > int(digit)):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\n\ndef check_element(lst, element):\n    for item in lst:\n        if (item != element):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\n\ndef max_sub_array_sum_repeated(arr, k, n):\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, (max_ending_here + x))\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(arr)\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for num in arr:\n        current_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for num in reversed(arr):\n        current_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    total_sum = sum(arr)\n    if (k == 1):\n        return max_kadane\n    elif (total_sum < 0):\n        return max(max_kadane, (max_suffix_sum + max_prefix_sum))\n    else:\n        return max(max_kadane, ((max_suffix_sum + max_prefix_sum) + (total_sum * (k - 2))))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(s):\n    return bool(re.search('ab{2,3}(?![b])', s))\n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\n\ndef find(dividend, divisor):\n    return (dividend // divisor)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\n\ndef max_length(lists):\n    max_len = 0\n    max_list = []\n    for lst in lists:\n        if (len(lst) > max_len):\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\n\ndef max_val(heterogeneous_list):\n    max_value = None\n    for item in heterogeneous_list:\n        if isinstance(item, (int, float)):\n            if ((max_value is None) or (item > max_value)):\n                max_value = item\n    return max_value\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(((a ** 2) + (b ** 2)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\n\ndef merge_and_count(arr, temp_arr, left, mid, right):\n    i = left\n    j = (mid + 1)\n    k = left\n    inv_count = 0\n    while ((i <= mid) and (j <= right)):\n        if (arr[i] <= arr[j]):\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += ((mid - i) + 1)\n            j += 1\n        k += 1\n    while (i <= mid):\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while (j <= right):\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for loop_var in range(left, (right + 1)):\n        arr[loop_var] = temp_arr[loop_var]\n    return inv_count\n\n\n\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if (left < right):\n        mid = ((left + right) // 2)\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, (mid + 1), right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\n\n\n\ndef get_Inv_Count(arr):\n    temp_arr = ([0] * len(arr))\n    return merge_sort_and_count(arr, temp_arr, 0, (len(arr) - 1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\n\ndef flatten_list(nested_list):\n    flattened = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    return flattened\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\n\ndef max_aggregate(scores):\n    aggregate_scores = {}\n    for (name, score) in scores:\n        if (name in aggregate_scores):\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\n\ndef is_not_prime(n):\n    if (n < 2):\n        return True\n    for i in range(2, (int((n ** 0.5)) + 1)):\n        if ((n % i) == 0):\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\n\ndef square_Sum(n):\n    total = 0\n    for i in range(1, (n + 1)):\n        total += ((2 * i) ** 2)\n    return total\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\n\ndef start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if (word.startswith('p') or word.startswith('P')):\n                p_words.append(word)\n                if (len(p_words) == 2):\n                    return tuple(p_words)\n    return (None if (len(p_words) < 2) else tuple(p_words))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["python Programming", "Java Programming", "perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\n\ndef dict_depth(d):\n    if (not isinstance(d, dict)):\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value))\n    return (max_depth + 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    dp = ([0] * (i + 1))\n    for j in range((i + 1)):\n        dp[j] = arr[j]\n        for m in range(j):\n            if (arr[m] < arr[j]):\n                dp[j] = max(dp[j], (dp[m] + arr[j]))\n    max_sum = 0\n    for j in range((i + 1)):\n        if (arr[j] < arr[k]):\n            max_sum = max(max_sum, dp[j])\n    return (max_sum + arr[k])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range((n + 1)):\n        total_count += (math.comb(n, k) ** 2)\n    return float(total_count)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\n\ndef maximum(a, b):\n    if (a > b):\n        return a\n    else:\n        return b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\n\ndef string_to_tuple(s: str) -> tuple:\n    return tuple(s)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\n\ndef large_product(list1, list2, n):\n    products = [(a * b) for a in list1 for b in list2]\n    products.sort(reverse=True)\n    return products[:n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\n\ndef set_left_most_unset_bit(n):\n    total_bits = n.bit_length()\n    for position in range((total_bits - 1), (- 1), (- 1)):\n        if ((n & (1 << position)) == 0):\n            n |= (1 << position)\n            break\n    else:\n        n |= (1 << total_bits)\n    return n\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15]], "plus_fail_tests": [[255]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    volume = ((((1 / 3) * math.pi) * (radius ** 2)) * height)\n    return volume\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\n\ndef is_prime(num):\n    if (num <= 1):\n        return False\n    if (num <= 3):\n        return True\n    if (((num % 2) == 0) or ((num % 3) == 0)):\n        return False\n    i = 5\n    while ((i * i) <= num):\n        if (((num % i) == 0) or ((num % (i + 2)) == 0)):\n            return False\n        i += 6\n    return True\n\n\n\n\ndef newman_prime(n):\n    if (n == 1):\n        return 2\n    count = 1\n    i = 2\n    (nsw_prev, nsw_curr) = (1, 1)\n    while True:\n        nsw_next = ((2 * nsw_curr) + nsw_prev)\n        (nsw_prev, nsw_curr) = (nsw_curr, nsw_next)\n        if is_prime(nsw_next):\n            count += 1\n            if (count == n):\n                return nsw_next\n        i += 1\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\n\ndef find_lucas(n):\n    if (n == 0):\n        return 2\n    elif (n == 1):\n        return 1\n    else:\n        (a, b) = (2, 1)\n        for _ in range(2, (n + 1)):\n            (a, b) = (b, (a + b))\n        return b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\n\ndef highest_Power_of_2(n: int) -> int:\n    power = 1\n    while ((power * 2) <= n):\n        power *= 2\n    return power\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\n\ndef add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\n\ndef convert_list_dictionary(ids, names, scores):\n    if ((len(ids) != len(names)) or (len(ids) != len(scores))):\n        raise ValueError('All input lists must have the same length.')\n    result = []\n    for i in range(len(ids)):\n        nested_dict = {ids[i]: {names[i]: scores[i]}}\n        result.append(nested_dict)\n    return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\n\ndef get_max_sum(n, memo={}):\n    if (n == 0):\n        return 0\n    if (n in memo):\n        return memo[n]\n    max_sum = (((get_max_sum((n // 2), memo) + get_max_sum((n // 3), memo)) + get_max_sum((n // 4), memo)) + get_max_sum((n // 5), memo))\n    memo[n] = max(max_sum, n)\n    return memo[n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\n\ndef check_distinct(tup):\n    return (len(tup) == len(set(tup)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\n\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\n\ndef sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        for digit in str(number):\n            total_sum += int(digit)\n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\n\ndef first_non_repeating_character(s: str):\n    char_count = {}\n    for char in s:\n        if (char in char_count):\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if (char_count[char] == 1):\n            return char\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\n\ndef minimum(a, b):\n    if (a < b):\n        return a\n    else:\n        return b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\n\ndef check_tuplex(tup, element):\n    return (element in tup)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\n\ndef find_Parity(number):\n    return ((number % 2) != 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\n\ndef extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\n\ndef remove_odd(numbers):\n    return [num for num in numbers if ((num % 2) == 0)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\n\ndef min_val(heterogeneous_list):\n    numeric_values = [x for x in heterogeneous_list if isinstance(x, (int, float))]\n    return (min(numeric_values) if numeric_values else None)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\n\ndef min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for (a, b) in tuples_list:\n        product = (a * b)\n        if (product < min_product):\n            min_product = product\n    return min_product\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\n\ndef overlapping(seq1, seq2):\n    intersection = (set(seq1) & set(seq2))\n    return bool(intersection)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\n\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    length_of_list = len(numbers)\n    result = (total_sum * length_of_list)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\n\ndef Find_Max(lst):\n    max_element = None\n    for element in lst:\n        if ((max_element is None) or (len(element) > len(max_element))):\n            max_element = element\n    return max_element\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\n\ndef cube_Sum(n):\n    total_sum = 0\n    for i in range(1, (n + 1)):\n        even_number = (2 * i)\n        total_sum += (even_number ** 3)\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\n\ndef concatenate_tuple(tup):\n    return '-'.join(map(str, tup))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\n\ndef max_Product(arr):\n    if (len(arr) < 2):\n        return None\n    max1 = max2 = float('-inf')\n    max1_index = max2_index = (- 1)\n    for (index, num) in enumerate(arr):\n        if (num > max1):\n            max2 = max1\n            max2_index = max1_index\n            max1 = num\n            max1_index = index\n        elif (num > max2):\n            max2 = num\n            max2_index = index\n    if (max1_index < max2_index):\n        return (max1, max2)\n    else:\n        return (max2, max1)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, -1, -2, -4, 5, 0, -6]]], "plus_fail_tests": [[[10, -20, 30, -40, 50, -60, 70, -80, 90, -100]]]}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\n\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = (((n * (n + 1)) // 2) ** 2)\n    average = (sum_of_cubes / n)\n    return average\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\n\ndef count_element_in_list(sublists, element):\n    count = 0\n    for sublist in sublists:\n        if (element in sublist):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\n\ndef extract_rear(strings_tuple):\n    return [string[(- 1)] for string in strings_tuple]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\n\ndef filter_oddnumbers(numbers):\n    return [num for num in numbers if ((num % 2) != 0)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\n\ndef change_date_format(date_str):\n    (year, month, day) = date_str.split('-')\n    return '-'.join([day, month, year])\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\n\ndef shell_sort(arr):\n    n = len(arr)\n    gap = (n // 2)\n    while (gap > 0):\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while ((j >= gap) and (arr[(j - gap)] > temp)):\n                arr[j] = arr[(j - gap)]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\n\ndef and_tuples(tuple1, tuple2):\n    return tuple(((a & b) for (a, b) in zip(tuple1, tuple2)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\n\ndef check_greater(arr, num):\n    for element in arr:\n        if (num <= element):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\n\ndef parabola_directrix(a, b, c):\n    h = ((- b) / (2 * a))\n    k = (c - ((b ** 2) / (4 * a)))\n    directrix = (k - (1 / (4 * a)))\n    return directrix\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\n\ndef median_trapezium(base1, base2, height):\n    return ((base1 + base2) / 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\n\ndef last_Digit(number):\n    return (number % 10)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-987]]}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\n\ndef neg_nos(lst):\n    return [num for num in lst if (num < 0)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\n\ndef remove_odd(s):\n    return ''.join((char for (index, char) in enumerate(s) if ((index % 2) != 0)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search('\\\\b(\\\\w+ly)\\\\b', sentence)\n    if match:\n        adverb = match.group(1)\n        start_index = match.start()\n        end_index = match.end()\n        return (start_index, end_index, adverb)\n    return None\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["awaquicklyy"]]}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\n\ndef multiple_to_single(int_list):\n    joined_string = ''.join((str(i) for i in int_list))\n    result = int(joined_string)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\n\ndef surfacearea_cube(s):\n    surface_area = (6 * (s ** 2))\n    return surface_area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\n\ndef index_multiplication(tuple1, tuple2):\n    result = tuple((tuple(((a * b) for (a, b) in zip(pair1, pair2))) for (pair1, pair2) in zip(tuple1, tuple2)))\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\n\ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\n\ndef cal_sum(n):\n    (p0, p1, p2) = (3, 0, 2)\n    sum_perrin = (((p0 + p1) + p2) if (n >= 2) else (p0 if (n == 0) else (p0 + p1)))\n    for i in range(3, (n + 1)):\n        next_perrin = (p1 + p0)\n        sum_perrin += next_perrin\n        (p0, p1, p2) = (p1, p2, next_perrin)\n    return sum_perrin\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\n\ndef cube_nums(numbers):\n    return [(x ** 3) for x in numbers]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\n\ndef remove_whitespaces(input_string):\n    return ''.join((char for char in input_string if (not char.isspace())))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\n\ndef extract_string(string_list, size):\n    result = []\n    for string in string_list:\n        if (len(string) == size):\n            result.append(string)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\n\ndef text_match_wordz(text):\n    return ('z' in text)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\n\ndef check_monthnumb_number(month):\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return (month in months_with_31_days)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\n\ndef reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::(- 1)])\n    return reversed_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\n\ndef remove_uppercase(s):\n    return ''.join([char for char in s if (not char.isupper())])\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\n\ndef Find_Min(list_of_lists):\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in list_of_lists:\n        if (len(sublist) < min_length):\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\n\ndef rectangle_area(length, width):\n    return (length * width)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\n\ndef Extract(lst):\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\n\ndef max_subarray_product(arr):\n    if (not arr):\n        return 0\n    max_product = min_product = result = arr[0]\n    for num in arr[1:]:\n        if (num < 0):\n            (max_product, min_product) = (min_product, max_product)\n        max_product = max(num, (max_product * num))\n        min_product = min(num, (min_product * num))\n        result = max(result, max_product)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    all_combinations = []\n    for i in range((len(elements) + 1)):\n        for combo in combinations(elements, i):\n            sorted_combo = sorted(combo, key=(lambda x: elements.index(x)))\n            all_combinations.append(sorted_combo)\n    return all_combinations\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\n\ndef drop_empty(input_dict):\n    return {k: v for (k, v) in input_dict.items() if (v is not None)}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\n\ndef max_product(arr):\n    n = len(arr)\n    if (n == 0):\n        return 0\n    max_product_list = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if (arr[i] > arr[j]):\n                max_product_list[i] = max(max_product_list[i], (max_product_list[j] * arr[i]))\n    return max(max_product_list)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[2, 3, 3, 4, 5, 3, 6]]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\n\ndef add_pairwise(tup):\n    result = []\n    for i in range((len(tup) - 1)):\n        pair_sum = (tup[i] + tup[(i + 1)])\n        result.append(pair_sum)\n    return tuple(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\n\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = ((product * num) % n)\n    return product\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\n\ndef check_Consecutive(nums):\n    if (len(nums) < 2):\n        return False\n    for i in range((len(nums) - 1)):\n        if ((nums[(i + 1)] - nums[i]) != 1):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[4]]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\n\ndef tuple_intersection(list1, list2):\n    normalized_set1 = {tuple(sorted(t)) for t in list1}\n    normalized_set2 = {tuple(sorted(t)) for t in list2}\n    intersection = normalized_set1.intersection(normalized_set2)\n    return intersection\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\n\ndef replace_char(original, to_replace, replacement):\n    result = []\n    for char in original:\n        if (char == to_replace):\n            result.append(replacement)\n        else:\n            result.append(char)\n    return ''.join(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\n\ndef sort_counter(counter):\n    sorted_items = sorted(counter.items(), key=(lambda item: item[1]), reverse=True)\n    return sorted_items\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\n\ndef big_sum(arr):\n    smallest = min(arr)\n    largest = max(arr)\n    return (smallest + largest)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\n\ndef is_lower(s: str) -> str:\n    return s.lower()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\n\ndef first_Digit(num):\n    num_str = str(abs(num))\n    return int(num_str[0])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\n\ndef remove_lowercase(s: str) -> str:\n    return ''.join([char for char in s if char.isupper()])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\n\ndef Split(numbers):\n    return [num for num in numbers if ((num % 2) != 0)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\n\ndef difference(n):\n    sum_n = ((n * (n + 1)) // 2)\n    sum_cubes = (sum_n ** 2)\n    return (sum_cubes - sum_n)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\n\ndef find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    for num in arr:\n        if ((num % 2) == 0):\n            even_count += 1\n        else:\n            odd_count += 1\n    return (odd_count * even_count)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 10]]}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\n\ndef toggle_string(s):\n    toggled_str = ''\n    for char in s:\n        if char.isupper():\n            toggled_str += char.lower()\n        else:\n            toggled_str += char.upper()\n    return toggled_str\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\n\ndef digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    total_difference = sum((abs((int(digit1) - int(digit2))) for (digit1, digit2) in zip(str_num1, str_num2)))\n    return total_difference\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\n\ndef max_sub_array_sum(arr, n):\n    max_sum = current_sum = arr[0]\n    for i in range(1, n):\n        current_sum = max(arr[i], (current_sum + arr[i]))\n        max_sum = max(max_sum, current_sum)\n        if (current_sum < 0):\n            current_sum = 0\n    return max_sum\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\n\ndef check(number):\n    reversed_number = int(str(number)[::(- 1)])\n    twice_reverse = (2 * reversed_number)\n    return (number == (twice_reverse - 1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\n\ndef union_elements(tuple1, tuple2):\n    combined_set = (set(tuple1) | set(tuple2))\n    sorted_elements = sorted(combined_set)\n    return tuple(sorted_elements)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\n\ndef Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        current_length = len(sublist)\n        if (current_length > max_length):\n            max_length = current_length\n    return max_length\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(input_string):\n    pattern = '\"(.*?)\"'\n    matches = re.findall(pattern, input_string)\n    return matches\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\n\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(len(lst)):\n        for j in range((i + 1), len(lst)):\n            if (lst[i] != lst[j]):\n                count += 1\n    return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6], 2]]}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\n\ndef split(s: str) -> list:\n    return list(s)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\n\ndef sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, (n + 1)):\n        if (((n % i) == 0) and ((i % 2) == 0)):\n            sum_even_factors += i\n    return sum_even_factors\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\n\ndef sum_digits(n):\n    return sum((int(digit) for digit in str(n)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\n\ndef issort_list(lst):\n    for i in range((len(lst) - 1)):\n        if (lst[i] > lst[(i + 1)]):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\n\ndef empty_list(N):\n    return [{} for _ in range(N)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\n\ndef sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\n\ndef find_Max_Num(digits):\n    str_digits = list(map(str, digits))\n\n    def custom_sort(x, y):\n        return ((y + x) > (x + y))\n    str_digits.sort(key=(lambda x: (x * 10)), reverse=True)\n    largest_num_str = ''.join(str_digits)\n    largest_num = int(largest_num_str)\n    return largest_num\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "from collections import Counter\n\ndef two_unique_nums(numbers):\n    count = Counter(numbers)\n    unique_numbers = [num for (num, cnt) in count.items() if (cnt == 1)]\n    return unique_numbers\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\n\ndef is_Sub_Array(main_list, sub_list):\n    main_length = len(main_list)\n    sub_length = len(sub_list)\n    if (sub_length > main_length):\n        return False\n    for i in range(((main_length - sub_length) + 1)):\n        if (main_list[i:(i + sub_length)] == sub_list):\n            return True\n    return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\n\ndef unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\n\ndef last_Digit_Factorial(n):\n    if (n < 2):\n        return 1\n    elif (n >= 5):\n        return 0\n    else:\n        last_digit = 1\n        for i in range(2, (n + 1)):\n            last_digit = ((last_digit * i) % 10)\n        return last_digit\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.5]]}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\n\ndef interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\n\ndef find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\n\ndef opposite_Signs(x, y):\n    return ((x ^ y) < 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\n\ndef extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if (isinstance(element, int) and ((element % 2) == 0)):\n            result.append(element)\n        elif isinstance(element, tuple):\n            even_tuple = extract_even(element)\n            if even_tuple:\n                result.append(even_tuple)\n    return tuple(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "import math\n\ndef catalan_number(n):\n    return (math.factorial((2 * n)) // (math.factorial((n + 1)) * math.factorial(n)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = (base_edge ** 2)\n    slant_height = math.sqrt((((base_edge / 2) ** 2) + (height ** 2)))\n    triangle_area = ((0.5 * base_edge) * slant_height)\n    total_triangle_area = (4 * triangle_area)\n    total_surface_area = (base_area + total_triangle_area)\n    return total_surface_area\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[10, 20]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\n\ndef expensive_items(items, n):\n    sorted_items = sorted(items, key=(lambda x: x['price']), reverse=True)\n    return sorted_items[:n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\n\ndef split_Arr(arr, n):\n    first_part = arr[:n]\n    second_part = arr[n:]\n    result = (second_part + first_part)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\n\ndef big_diff(nums):\n    max_value = max(nums)\n    min_value = min(nums)\n    difference = (max_value - min_value)\n    return difference\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\n\ndef list_tuple(input_list):\n    return tuple(input_list)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    squares = []\n    start_point = math.ceil(math.sqrt(start))\n    end_point = math.floor(math.sqrt(end))\n    for i in range(start_point, (end_point + 1)):\n        square = (i * i)\n        if (start <= square <= end):\n            squares.append(square)\n    return squares\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, -1]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\n\ndef is_octagonal(n):\n    return (n * ((3 * n) - 2))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = (r * math.cos(theta))\n    y = (r * math.sin(theta))\n    return ((x, y), complex(x, y))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\n\ndef swap_List(lst):\n    if (len(lst) < 2):\n        return lst\n    (lst[0], lst[(- 1)]) = (lst[(- 1)], lst[0])\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\n\ndef diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    for num in numbers:\n        if ((first_even is None) and ((num % 2) == 0)):\n            first_even = num\n        elif ((first_odd is None) and ((num % 2) != 0)):\n            first_odd = num\n        if ((first_even is not None) and (first_odd is not None)):\n            break\n    return (first_even - first_odd)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\n\ndef removezero_ip(ip):\n    octets = ip.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip = '.'.join(cleaned_octets)\n    return cleaned_ip\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\n\ndef find_kth(arr1, arr2, k):\n    (len1, len2) = (len(arr1), len(arr2))\n    if (len1 > len2):\n        (arr1, arr2, len1, len2) = (arr2, arr1, len2, len1)\n    (low, high) = (0, len1)\n    while (low <= high):\n        partition1 = ((low + high) // 2)\n        partition2 = (k - partition1)\n        maxLeft1 = (arr1[(partition1 - 1)] if (partition1 > 0) else float('-inf'))\n        minRight1 = (arr1[partition1] if (partition1 < len1) else float('inf'))\n        maxLeft2 = (arr2[(partition2 - 1)] if (partition2 > 0) else float('-inf'))\n        minRight2 = (arr2[partition2] if (partition2 < len2) else float('inf'))\n        if ((maxLeft1 <= minRight2) and (maxLeft2 <= minRight1)):\n            return max(maxLeft1, maxLeft2)\n        elif (maxLeft1 > minRight2):\n            high = (partition1 - 1)\n        else:\n            low = (partition1 + 1)\n    return None\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\n\ndef armstrong_number(num):\n    str_num = str(num)\n    num_digits = len(str_num)\n    sum_of_powers = 0\n    for digit in str_num:\n        sum_of_powers += (int(digit) ** num_digits)\n    return (sum_of_powers == num)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\n\ndef differ_At_One_Bit_Pos(num1: int, num2: int) -> bool:\n    xor_result = (num1 ^ num2)\n    return ((xor_result != 0) and ((xor_result & (xor_result - 1)) == 0))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\n\ndef sum_average(n):\n    total_sum = ((n * (n + 1)) // 2)\n    average = (total_sum / n)\n    return (total_sum, average)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\n\ndef is_Even(number):\n    return ((number % 2) == 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\n\ndef first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if (char in seen):\n            return char\n        seen.add(char)\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    radians = (degrees * (math.pi / 180))\n    return radians\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\n\ndef reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = words[::(- 1)]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(input_string, pattern):\n    match = re.search(pattern, input_string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\n\ndef prime_num(n):\n    if (n < 2):\n        return False\n    for i in range(2, (int((n ** 0.5)) + 1)):\n        if ((n % i) == 0):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\n\ndef bell_Number(n):\n    bell = [[0 for _ in range((n + 1))] for _ in range((n + 1))]\n    bell[0][0] = 1\n    for i in range(1, (n + 1)):\n        bell[i][0] = bell[(i - 1)][(i - 1)]\n        for j in range(1, (i + 1)):\n            bell[i][j] = (bell[(i - 1)][(j - 1)] + bell[i][(j - 1)])\n    return bell[n][0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\n\ndef remove_kth_element(lst, k):\n    if ((k < 1) or (k > len(lst))):\n        return lst\n    return (lst[:(k - 1)] + lst[k:])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\n\ndef max_of_nth(matrix, n):\n    column_values = [row[(n - 1)] for row in matrix]\n    return max(column_values)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], "plus_fail_tests": [[[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2]]}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\n\ndef merge(list_of_lists):\n    first_elements = []\n    second_elements = []\n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\n\ndef cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        for num in tup:\n            total += num\n    return total\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\n\ndef average_tuple(tuples_of_tuples):\n    if (not all(((len(inner) == len(tuples_of_tuples[0])) for inner in tuples_of_tuples))):\n        raise ValueError('All inner tuples must be of the same length.')\n    sums = ([0] * len(tuples_of_tuples[0]))\n    for inner_tuple in tuples_of_tuples:\n        for (i, value) in enumerate(inner_tuple):\n            sums[i] += value\n    averages = [(sum_value / len(tuples_of_tuples)) for sum_value in sums]\n    return averages\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[2, 4], [8, 10, 12], [14, 16, 18], [20, 22, 24]]]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\n\ndef tuple_modulo(tuple1, tuple2):\n    if (len(tuple1) != len(tuple2)):\n        raise ValueError('Tuples must be of the same length')\n    return tuple(((a % b) for (a, b) in zip(tuple1, tuple2)))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\n\ndef div_list(list1, list2):\n    if (len(list1) != len(list2)):\n        raise ValueError('Both lists must be of the same length.')\n    return [(float(a) / b) for (a, b) in zip(list1, list2)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\n\ndef move_num(s):\n    chars = ''\n    nums = ''\n    for char in s:\n        if char.isdigit():\n            nums += char\n        else:\n            chars += char\n    return (chars + nums)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\n\ndef smallest_num(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if (num < smallest):\n            smallest = num\n    return smallest\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\n\ndef largest_subset(numbers):\n    numbers.sort()\n    n = len(numbers)\n    dp = ([1] * n)\n    for i in range(n):\n        for j in range(i):\n            if ((numbers[i] % numbers[j]) == 0):\n                dp[i] = max(dp[i], (dp[j] + 1))\n    return max(dp)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]]]}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\n\ndef get_median(list1, list2, size):\n    merged = []\n    (i, j) = (0, 0)\n    while ((i < size) and (j < size)):\n        if (list1[i] < list2[j]):\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    merged.extend(list1[i:])\n    merged.extend(list2[j:])\n    mid_index = (len(merged) // 2)\n    median = ((merged[(mid_index - 1)] + merged[mid_index]) / 2.0)\n    return median\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[3, 6, 14, 23], [2, 18, 27, 39, 49, 55], 4]]}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\n\ndef is_upper(s):\n    return s.upper()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\n\ndef nth_nums(numbers, n):\n    return [(x ** n) for x in numbers]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Dog", "Cat", "CatBird", "Bird", "Fish"], 77]]}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\n\ndef triangle_area(radius):\n    if (radius < 0):\n        return None\n    area = (((1 / 2) * (2 * radius)) * radius)\n    return area\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[999999999]]}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\n\ndef replace_spaces(input_string):\n    modified_string = input_string.replace(' ', '%20')\n    return modified_string\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\n\ndef max_difference(tuples_list):\n    max_diff = 0\n    for (a, b) in tuples_list:\n        diff = abs((a - b))\n        if (diff > max_diff):\n            max_diff = diff\n    return max_diff\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\n\ndef Split(numbers):\n    even_numbers = [number for number in numbers if ((number % 2) == 0)]\n    return even_numbers\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\n\ndef move_zero(lst):\n    non_zero_elements = []\n    zero_count = 0\n    for num in lst:\n        if (num != 0):\n            non_zero_elements.append(num)\n        else:\n            zero_count += 1\n    non_zero_elements.extend(([0] * zero_count))\n    return non_zero_elements\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\n\ndef replace_spaces(input_string):\n    result = []\n    for char in input_string:\n        if (char == ' '):\n            result.append('_')\n        elif (char == '_'):\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\n\ndef count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        for end in range(start, n):\n            sum_digits = sum((int(digit) for digit in s[start:(end + 1)]))\n            length = ((end - start) + 1)\n            if (sum_digits == length):\n                count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\n\ndef pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range((i + 1), n):\n            total_xor_sum += (arr[i] ^ arr[j])\n    return total_xor_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\n\ndef heapify(arr, n, i):\n    largest = i\n    left = ((2 * i) + 1)\n    right = ((2 * i) + 2)\n    if ((left < n) and (arr[i] < arr[left])):\n        largest = left\n    if ((right < n) and (arr[largest] < arr[right])):\n        largest = right\n    if (largest != i):\n        (arr[i], arr[largest]) = (arr[largest], arr[i])\n        heapify(arr, n, largest)\n\n\n\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(((n // 2) - 1), (- 1), (- 1)):\n        heapify(arr, n, i)\n    for i in range((n - 1), 0, (- 1)):\n        (arr[0], arr[i]) = (arr[i], arr[0])\n        heapify(arr, i, 0)\n    return arr\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\n\ndef noprofit_noloss(selling_price, cost_price):\n    return (selling_price == cost_price)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    wci = (((13.12 + (0.6215 * temperature)) - (35.75 * (velocity ** 0.16))) + ((0.4275 * temperature) * (velocity ** 0.16)))\n    return math.ceil(wci)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120, 35]], "plus_fail_tests": [[0, 0]]}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\n\ndef sample_nam(names):\n    filtered_names = [name for name in names if name[0].isupper()]\n    total_length = sum((len(name) for name in filtered_names))\n    return total_length\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\n\ndef subject_marks(marks):\n    return sorted(marks, key=(lambda x: x[1]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\n\ndef is_nonagonal(n):\n    return ((n * ((7 * n) - 5)) // 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\n\ndef text_match_wordz_middle(s):\n    if (len(s) < 3):\n        return False\n    middle_section = s[1:(- 1)]\n    return ('z' in middle_section)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\n\ndef get_ludic(n):\n    numbers = list(range(1, (n + 1)))\n    ludic_numbers = [1]\n    i = 1\n    while (i < len(numbers)):\n        ludic_number = numbers[i]\n        if (ludic_number > n):\n            break\n        ludic_numbers.append(ludic_number)\n        numbers = [num for (idx, num) in enumerate(numbers) if ((((idx - i) % ludic_number) != 0) or (idx <= i))]\n        i += 1\n    return ludic_numbers\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\n\ndef reverse_Array_Upto_K(arr, k):\n    reversed_part = arr[:k][::(- 1)]\n    unchanged_part = arr[k:]\n    return (reversed_part + unchanged_part)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\n\ndef get_coordinates(coord):\n    (x, y) = coord\n    adjacent_coords = []\n    for dx in [(- 1), 0, 1]:\n        for dy in [(- 1), 0, 1]:\n            adjacent_coords.append([(x + dx), (y + dy)])\n    return adjacent_coords\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\n\ndef recursive_list_sum(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\n\ndef pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if (num > 0):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\n\ndef is_Monotonic(array):\n    if (len(array) <= 1):\n        return True\n    increasing = True\n    decreasing = True\n    for i in range((len(array) - 1)):\n        if (array[i] < array[(i + 1)]):\n            decreasing = False\n        elif (array[i] > array[(i + 1)]):\n            increasing = False\n    return (increasing or decreasing)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\n\ndef bell_number(n):\n    bell = [[0 for _ in range((n + 1))] for _ in range((n + 1))]\n    bell[0][0] = 1\n    for i in range(1, (n + 1)):\n        bell[i][0] = bell[(i - 1)][(i - 1)]\n        for j in range(1, (i + 1)):\n            bell[i][j] = (bell[(i - 1)][(j - 1)] + bell[i][(j - 1)])\n    return bell[n][0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\n\ndef is_sublist(main_list, sublist):\n    sublist_length = len(sublist)\n    for i in range(((len(main_list) - sublist_length) + 1)):\n        if (main_list[i:(i + sublist_length)] == sublist):\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\n\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n    while (not sorted):\n        gap = (int((gap / shrink)) if (gap > 1) else 1)\n        sorted = (gap == 1)\n        for i in range((len(arr) - gap)):\n            if (arr[i] > arr[(i + gap)]):\n                (arr[i], arr[(i + gap)]) = (arr[(i + gap)], arr[i])\n                sorted = False\n    return arr\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\n\ndef get_equal(tuples_list):\n    lengths = {len(t) for t in tuples_list}\n    return (len(lengths) == 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\n\ndef dif_Square(n):\n    return ((n % 4) != 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\n\ndef find_char_long(input_string):\n    long_words = {word for word in input_string.split() if (len(word) >= 4)}\n    return long_words\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += (comb(n, k) * comb(n, (k + 1)))\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\n\ndef add_dict_to_tuple(tup, dictionary):\n    temp_list = list(tup)\n    temp_list.append(dictionary)\n    new_tuple = tuple(temp_list)\n    return new_tuple\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\n\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]\n    dp[0][0] = (matrix[0][0], 1)\n    for i in range(N):\n        for j in range(N):\n            if ((i == 0) and (j == 0)):\n                continue\n            from_above = (dp[(i - 1)][j] if (i > 0) else (0, 0))\n            from_left = (dp[i][(j - 1)] if (j > 0) else (0, 0))\n            (max_avg, max_total, max_count) = (0, 0, 0)\n            if (from_above[1] != 0):\n                avg_from_above = ((from_above[0] + matrix[i][j]) / (from_above[1] + 1))\n                if (avg_from_above > max_avg):\n                    (max_avg, max_total, max_count) = (avg_from_above, (from_above[0] + matrix[i][j]), (from_above[1] + 1))\n            if (from_left[1] != 0):\n                avg_from_left = ((from_left[0] + matrix[i][j]) / (from_left[1] + 1))\n                if (avg_from_left > max_avg):\n                    (max_avg, max_total, max_count) = (avg_from_left, (from_left[0] + matrix[i][j]), (from_left[1] + 1))\n            dp[i][j] = (max_total, max_count)\n    (total_cost, count) = dp[(N - 1)][(N - 1)]\n    return (total_cost / count)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\n\ndef filter_data(students_dict, min_height, min_weight):\n    filtered_students = {}\n    for (name, (height, weight)) in students_dict.items():\n        if ((height >= min_height) and (weight >= min_weight)):\n            filtered_students[name] = (height, weight)\n    return filtered_students\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\n\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == list2[i]):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\n\ndef power_base_sum(base, power):\n    result = (base ** power)\n    result_str = str(result)\n    digit_sum = sum((int(digit) for digit in result_str))\n    return digit_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\n\ndef sum_list(list_a, list_b):\n    return [(a + b) for (a, b) in zip(list_a, list_b)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\n\ndef multiply_elements(numbers):\n    products = []\n    for i in range((len(numbers) - 1)):\n        product = (numbers[i] * numbers[(i + 1)])\n        products.append(product)\n    return tuple(products)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\n\ndef consecutive_duplicates(input_list):\n    if (not input_list):\n        return []\n    result = [input_list[0]]\n    for element in input_list[1:]:\n        if (element != result[(- 1)]):\n            result.append(element)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\n\ndef replace_specialchar(input_string):\n    result = input_string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(input_string):\n    matches = re.findall('\"(.*?)\"', input_string)\n    return matches\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(((r ** 2) + (h ** 2)))\n    lateral_surface_area = ((math.pi * r) * l)\n    return lateral_surface_area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\n\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    n = len(lst)\n    for start in range(n):\n        for end in range(start, n):\n            product = 1\n            for i in range(start, (end + 1)):\n                product *= lst[i]\n            total_sum += product\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\n\ndef find_first_occurrence(arr, target):\n    (left, right) = (0, (len(arr) - 1))\n    while (left <= right):\n        mid = ((left + right) // 2)\n        if (arr[mid] == target):\n            if ((mid == 0) or (arr[(mid - 1)] < target)):\n                return mid\n            right = (mid - 1)\n        elif (arr[mid] < target):\n            left = (mid + 1)\n        else:\n            right = (mid - 1)\n    return (- 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\n\ndef toggle_middle_bits(n):\n    binary = bin(n)[2:]\n    if (len(binary) < 3):\n        return n\n    toggled = ((binary[0] + ''.join((('1' if (bit == '0') else '0') for bit in binary[1:(- 1)]))) + binary[(- 1)])\n    result = int(toggled, 2)\n    return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\n\ndef left_insertion(arr, value):\n    (low, high) = (0, len(arr))\n    while (low < high):\n        mid = ((low + high) // 2)\n        if (arr[mid] < value):\n            low = (mid + 1)\n        else:\n            high = mid\n    return low\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\n\ndef is_samepatterns(patterns, values):\n    if (len(patterns) != len(values)):\n        return False\n    pattern_to_value = {}\n    value_to_pattern = {}\n    for (p, v) in zip(patterns, values):\n        if (p in pattern_to_value):\n            if (pattern_to_value[p] != v):\n                return False\n        else:\n            pattern_to_value[p] = v\n        if (v in value_to_pattern):\n            if (value_to_pattern[v] != p):\n                return False\n        else:\n            value_to_pattern[v] = p\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]]]}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\n\ndef all_Characters_Same(s: str) -> bool:\n    if (len(s) <= 1):\n        return True\n    return (len(set(s)) == 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\n\ndef tuple_to_dict(tup):\n    result = {}\n    for i in range(0, (len(tup) - 1), 2):\n        key = tup[i]\n        value = tup[(i + 1)]\n        result[key] = value\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\n\ndef rotate_right(lst, n):\n    n = (n % len(lst))\n    return (lst[(- n):] + lst[:(- n)])\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3) * (a ** 2))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\n\ndef check_none(tup):\n    for item in tup:\n        if (item is None):\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\n\ndef capital_words_spaces(s: str) -> str:\n    result = (s[0] if s else '')\n    for char in s[1:]:\n        if char.isupper():\n            result += ' '\n        result += char\n    return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\n\ndef add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\n\ndef sort_numeric_strings(string_list):\n    int_list = [int(num) for num in string_list]\n    sorted_list = sorted(int_list)\n    return sorted_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\n\ndef find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all((((element % k) == 0) for element in tup)):\n            result.append(tup)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(((n // 2) - 1), (- 1), (- 1)):\n        left_child_index = ((2 * i) + 1)\n        right_child_index = ((2 * i) + 2)\n        if ((left_child_index < n) and (arr[i] > arr[left_child_index])):\n            return False\n        if ((right_child_index < n) and (arr[i] > arr[right_child_index])):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\n\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, (endnum + 1)):\n        str_num = str(num)\n        if ('0' in str_num):\n            continue\n        if all((((num % int(digit)) == 0) for digit in str_num)):\n            result.append(num)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\n\ndef jacobsthal_num(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    (j0, j1) = (0, 1)\n    for i in range(2, (n + 1)):\n        j_next = (j1 + (2 * j0))\n        (j0, j1) = (j1, j_next)\n    return j1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\n\ndef min_k(records, k):\n    sorted_records = sorted(records, key=(lambda x: x[1]))\n    return sorted_records[:k]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\n\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if (l1[i] == l2[i] == l3[i]):\n            common_elements.append(l1[i])\n    return common_elements\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\n\ndef second_smallest(numbers):\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if (number < smallest):\n            second_smallest = smallest\n            smallest = number\n        elif (smallest < number < second_smallest):\n            second_smallest = number\n    if (second_smallest == float('inf')):\n        return None\n    return second_smallest\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\n\ndef count_reverse_pairs(string_list):\n    seen = set()\n    count = 0\n    for string in string_list:\n        reversed_string = string[::(- 1)]\n        if (reversed_string in seen):\n            count += 1\n        else:\n            seen.add(string)\n    return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["abc", "cba", "def", "fed", "hij", "jih", "klm", "mlk", "def"]]]}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\n\ndef unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if (tuple_sublist in count_dict):\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = '^[+-]?(\\\\d+\\\\.\\\\d{2})$'\n    return (re.fullmatch(pattern, s) is not None)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\n\ndef unique_Element(numbers):\n    return (len(set(numbers)) == 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\n\ndef check_monthnumber_number(month):\n    months_with_30_days = [4, 6, 9, 11]\n    return (month in months_with_30_days)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\n\ndef find_min_diff(arr, n):\n    sorted_arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range((n - 1)):\n        diff = (sorted_arr[(i + 1)] - sorted_arr[i])\n        if (diff < min_diff):\n            min_diff = diff\n    return min_diff\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\n\ndef number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\n\ndef pair_wise(lst):\n    pairs = []\n    for i in range((len(lst) - 1)):\n        pair = (lst[i], lst[(i + 1)])\n        pairs.append(pair)\n    return pairs\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\n\ndef get_pairs_count(numbers, target_sum):\n    count = 0\n    num_count = {}\n    for num in numbers:\n        num_count[num] = (num_count.get(num, 0) + 1)\n    for num in num_count:\n        complement = (target_sum - num)\n        if (complement in num_count):\n            if (complement != num):\n                count += (num_count[num] * num_count[complement])\n            else:\n                count += ((num_count[num] * (num_count[num] - 1)) // 2)\n    return ((count // 2) if (complement != num) else count)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\n\ndef Diff(list1, list2):\n    difference = []\n    for item in list1:\n        if (item not in list2):\n            difference.append(item)\n    return difference\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\n\ndef odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_number = ((2 * i) + 1)\n        total_sum += (odd_number ** 4)\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\n\ndef is_Diff(number):\n    return ((number % 11) == 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\n\ndef check_expression(expression):\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    stack = []\n    for char in expression:\n        if (char in matching_brackets.values()):\n            stack.append(char)\n        elif (char in matching_brackets):\n            if ((not stack) or (stack.pop() != matching_brackets[char])):\n                return False\n    return (len(stack) == 0)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\n\ndef occurance_substring(main_string, substring):\n    start_index = main_string.find(substring)\n    if (start_index == (- 1)):\n        return None\n    end_index = (start_index + len(substring))\n    return (substring, start_index, end_index)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\n\ndef remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if (len(word) != k)]\n    result = ' '.join(filtered_words)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\n\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if ((lst[i] % 2) == 0):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "from collections import Counter\n\ndef find_sum(lst):\n    count = Counter(lst)\n    return sum((key for (key, value) in count.items() if (value == 1)))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 1, 1, 4, 5, 6]]], "plus_fail_tests": [[[-1, -2, -3, -1, -1, -4, -5, -6]]]}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\n\ndef pack_consecutive_duplicates(input_list):\n    if (not input_list):\n        return []\n    result = []\n    temp = [input_list[0]]\n    for i in range(1, len(input_list)):\n        if (input_list[i] == input_list[(i - 1)]):\n            temp.append(input_list[i])\n        else:\n            result.append(temp)\n            temp = [input_list[i]]\n    result.append(temp)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\n\ndef find_combinations(tuple_list):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range((i + 1), len(tuple_list)):\n            sum_first = (tuple_list[i][0] + tuple_list[j][0])\n            sum_second = (tuple_list[i][1] + tuple_list[j][1])\n            result.append((sum_first, sum_second))\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, (int((n ** 0.5)) + 1)):\n        if ((n % i) == 0):\n            count += 1\n            if (i != (n // i)):\n                count += 1\n    return ((count % 2) == 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\n\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for start in range(n):\n        for end in range(start, n):\n            if ((((end - start) + 1) % 2) == 1):\n                total_sum += sum(arr[start:(end + 1)])\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\n\ndef mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if (((num % 2) == 0) and (first_even is None)):\n            first_even = num\n        elif (((num % 2) != 0) and (first_odd is None)):\n            first_odd = num\n        if ((first_even is not None) and (first_odd is not None)):\n            break\n    if ((first_even is not None) and (first_odd is not None)):\n        return (first_even * first_odd)\n    else:\n        return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\n\ndef tuple_str_int(tuple_str):\n    cleaned_str = tuple_str.strip('()')\n    str_elements = cleaned_str.split(',')\n    int_tuple = tuple((int(x) for x in str_elements))\n    return int_tuple\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\n\ndef right_insertion(sorted_list, value):\n    (left, right) = (0, len(sorted_list))\n    while (left < right):\n        mid = ((left + right) // 2)\n        if (sorted_list[mid] < value):\n            left = (mid + 1)\n        else:\n            right = mid\n    return left\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[7, true, 3, 6], true]]}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\n\ndef new_tuple(lst, string):\n    tuple_from_list = tuple(lst)\n    result_tuple = (tuple_from_list + (string,))\n    return result_tuple\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\n\ndef word_len(word):\n    length = len(word)\n    return ((length % 2) != 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    return (re.search('ab{3}', s) is not None)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\n\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if ((lst[i] % 2) != 0):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\n\ndef remove_nested(input_tuple):\n    return tuple((element for element in input_tuple if (not isinstance(element, tuple))))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\n\ndef last(arr, target):\n    last_position = (- 1)\n    for i in range(len(arr)):\n        if (arr[i] == target):\n            last_position = i\n    return last_position\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s: str) -> bool:\n    pattern = '^a.*b$'\n    return bool(re.fullmatch(pattern, s))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\n\ndef count_list(lists):\n    return len(lists)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\n\ndef return_sum(input_dict):\n    return sum(input_dict.values())\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\n\ndef find_Index(n: int) -> int:\n    index = (0 if (n > 1) else 1)\n    while True:\n        triangular_number = ((index * (index + 1)) // 2)\n        if (len(str(triangular_number)) == n):\n            return index\n        index += 1\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\n\ndef _sum(array):\n    return sum(array)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\n\ndef left_rotate(n, d):\n    d %= 32\n    return (((n << d) | (n >> (32 - d))) & 4294967295)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\n\ndef square_nums(nums):\n    return [(num * num) for num in nums]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\n\ndef tetrahedral_number(n):\n    return (((n * (n + 1)) * (n + 2)) // 6)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\n\ndef sum_in_range(l, r):\n    total_sum = 0\n    for number in range(l, (r + 1)):\n        if ((number % 2) != 0):\n            total_sum += number\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(num: int) -> bool:\n    if (num < 0):\n        return False\n    root = math.isqrt(num)\n    return ((root * root) == num)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\n\ndef test_three_equal(a, b, c):\n    if (a == b == c):\n        return 3\n    elif ((a == b) or (a == c) or (b == c)):\n        return 2\n    else:\n        return 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\n\ndef is_product_even(numbers):\n    for number in numbers:\n        if ((number % 2) == 0):\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\n\ndef max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if (current_sum > max_sum):\n            max_sum = current_sum\n            max_list = sublist\n    return max_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\n\ndef remove_all_spaces(input_string):\n    return ''.join(input_string.split())\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["python\nprogram"]]}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\n\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\n\ndef first_odd(numbers):\n    for number in numbers:\n        if ((number % 2) != 0):\n            return number\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\n\ndef check_K(tup, k):\n    return (k in tup)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\n\ndef check_smaller(tuple1, tuple2):\n    for (a, b) in zip(tuple1, tuple2):\n        if (not (b < a)):\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    volume = (((4 / 3) * math.pi) * (radius ** 3))\n    return volume\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return ((4 * math.pi) * (radius ** 2))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\n\ndef centered_hexagonal_number(n):\n    return (((3 * n) * (n - 1)) + 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\n\ndef freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if (item in frequency):\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\n\ndef is_power_of_two(n):\n    return ((n > 0) and ((n & (n - 1)) == 0))\n\n\n\n\ndef is_polite(n):\n    count = 0\n    current_number = 1\n    while (count < n):\n        if (not is_power_of_two(current_number)):\n            count += 1\n            if (count == n):\n                return current_number\n        current_number += 1\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10000000]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\n\ndef closest_num(n):\n    return (n - 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, (n + 1)):\n        rotated = (s[i:] + s[:i])\n        if (rotated == s):\n            return i\n    return n\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\n\ndef len_log(words):\n    max_length = 0\n    for word in words:\n        word_length = len(word)\n        if (word_length > max_length):\n            max_length = word_length\n    return max_length\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\n\ndef is_undulating(number):\n    num_str = str(number)\n    if (len(num_str) < 3):\n        return False\n    distinct_digits = set()\n    for i in range((len(num_str) - 1)):\n        if (num_str[i] == num_str[(i + 1)]):\n            return False\n        distinct_digits.add(num_str[i])\n    distinct_digits.add(num_str[(- 1)])\n    return (len(distinct_digits) == 2)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[82]]}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\n\ndef find_substring(string_list, substring):\n    for string in string_list:\n        if (substring in string):\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\n\ndef power(a, b):\n    return (a ** b)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\n\ndef index_minimum(tuples_list):\n    min_value = float('inf')\n    min_first_value = None\n    for (first, second) in tuples_list:\n        if (second < min_value):\n            min_value = second\n            min_first_value = first\n    return min_first_value\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\n\ndef Find_Min_Length(list_of_lists):\n    min_length = len(list_of_lists[0])\n    for sublist in list_of_lists[1:]:\n        current_length = len(sublist)\n        if (current_length < min_length):\n            min_length = current_length\n    return min_length\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\n\ndef frequency_lists(lists_of_lists):\n    flattened_list = [item for sublist in lists_of_lists for item in sublist]\n    frequency = {}\n    for item in flattened_list:\n        if (item in frequency):\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    length = len(numbers)\n    return (product / length)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\n\ndef decimal_to_binary(n: int) -> str:\n    if (n == 0):\n        return '0'\n    binary_digits = []\n    while (n > 0):\n        remainder = (n % 2)\n        binary_digits.append(str(remainder))\n        n //= 2\n    binary_digits.reverse()\n    return ''.join(binary_digits)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\n\ndef divisor(n):\n    count = 0\n    for i in range(1, (n + 1)):\n        if ((n % i) == 0):\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\n\ndef even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, (n + 1)):\n        even_number = (2 * i)\n        total_sum += (even_number ** 5)\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\n\ndef sequence(n):\n    if ((n == 1) or (n == 2)):\n        return 1\n    P = ([0] * (n + 1))\n    (P[1], P[2]) = (1, 1)\n    for i in range(3, (n + 1)):\n        P[i] = (P[P[(i - 1)]] + P[(i - P[(i - 1)])])\n    return P[n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}