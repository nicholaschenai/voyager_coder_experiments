{
    "unique_integers": {
        "code": "\n\ndef unique_integers(int_list):\n    unique_set = set(int_list)\n    return list(unique_set)\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a list of unique integers from that list.",
        "description": "\n[description for function: unique_integers]\nThis function takes a list of integers as input and converts it into a set to eliminate any duplicate values. It then returns a new list containing only the unique integers from the original list. The use of a set ensures that each integer appears only once in the output. The order of the integers in the resulting list may not match their original order due to the properties of sets. This function is useful for filtering out duplicates from a collection of integers. Overall, it provides a simple way to obtain a list of unique integers from a given list.\n\n[end of description]\n"
    },
    "count_occurrences": {
        "code": "\n\ndef count_occurrences(int_list):\n    counts = {}\n    for num in int_list:\n        if (num in counts):\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return counts\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a dictionary with the integers as keys and their counts as values.",
        "description": "\n[description for function: count_occurrences]\nThis function takes a list of integers as input and counts the occurrences of each integer in the list. It initializes an empty dictionary to store the counts. As it iterates through the list, it updates the count for each integer, either by incrementing the existing count or initializing it to one if the integer is encountered for the first time. Finally, it returns the dictionary containing the integers and their corresponding counts. This allows users to easily see how many times each integer appears in the input list. The function effectively provides a frequency distribution of the integers.\n\n[end of description]\n"
    },
    "find_intersection": {
        "code": "\n\ndef find_intersection(list1, list2):\n    set1 = set(list1)\n    intersection_set = set()\n    for item in list2:\n        if (item in set1):\n            intersection_set.add(item)\n    return list(intersection_set)\n",
        "dependencies": [],
        "task": "Write a Python function that takes two lists of integers and returns a list of integers that are present in both lists (the intersection).",
        "description": "\n[description for function: find_intersection]\nThis function takes two lists as input and identifies the common elements between them. It converts the first list into a set for efficient membership testing. Then, it iterates through the second list, checking if each item is present in the set created from the first list. If an item is found in both lists, it is added to a new set that stores the intersection. Finally, the function returns the intersection as a list, ensuring that the result contains only unique elements.\n\n[end of description]\n"
    },
    "find_unique_integers": {
        "code": "\n\ndef count_occurrences(int_list):\n    counts = {}\n    for num in int_list:\n        if (num in counts):\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return counts\n\n\n\n\ndef find_unique_integers(int_list):\n    counts = count_occurrences(int_list)\n    unique_integers = [num for (num, count) in counts.items() if (count == 1)]\n    return unique_integers\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a list of integers that are unique (appear only once) in the list.",
        "description": "\n[description for function: find_unique_integers]\nThis function takes a list of integers as input and counts the occurrences of each integer in the list. It then creates a new list containing only the integers that appear exactly once in the original list. The result is a list of unique integers, which are those that do not have any duplicates. Finally, the function returns this list of unique integers.\n\n[end of description]\n"
    },
    "find_duplicates": {
        "code": "\n\ndef find_duplicates(int_list):\n    counts = {}\n    duplicates = []\n    for num in int_list:\n        if (num in counts):\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for (num, count) in counts.items():\n        if (count > 1):\n            duplicates.append(num)\n    return duplicates\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a list of integers that are duplicates (appear more than once) in the list.",
        "description": "\n[description for function: find_duplicates]\nThis function takes a list of integers as input and identifies the numbers that appear more than once. It uses a dictionary to count the occurrences of each integer in the list. After counting, it iterates through the dictionary to collect all integers that have a count greater than one. The resulting list of duplicate integers is then returned. This function effectively helps in identifying duplicates within the provided list. It ensures that only unique duplicates are included in the final output.\n\n[end of description]\n"
    },
    "find_second_largest": {
        "code": "\n\ndef find_second_largest(numbers):\n    unique_numbers = set(numbers)\n    if (len(unique_numbers) < 2):\n        return None\n    sorted_numbers = sorted(unique_numbers, reverse=True)\n    return sorted_numbers[1]\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns the second largest integer in the list. If the list has fewer than two unique integers, return None.",
        "description": "\n[description for function: find_second_largest]\nThis function takes a list of numbers as input and identifies the second largest unique number from that list. It first converts the list into a set to eliminate duplicates. If there are fewer than two unique numbers, it returns None. Otherwise, it sorts the unique numbers in descending order. Finally, it returns the second element from the sorted list, which corresponds to the second largest number.\n\n[end of description]\n"
    },
    "filter_even_numbers": {
        "code": "\n\ndef filter_even_numbers(input_list):\n    even_numbers = []\n    for number in input_list:\n        if ((number % 2) == 0):\n            even_numbers.append(number)\n    return even_numbers\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a new list containing only the even integers from the original list.",
        "description": "\n[description for function: filter_even_numbers]\nThis function takes a list of numbers as input and iterates through each number to check if it is even. If a number is found to be even (i.e., divisible by 2 with no remainder), it is added to a new list. After processing all the numbers, the function returns the list containing only the even numbers. The output will be an array that excludes any odd numbers from the original input. This allows users to easily filter out even values from a mixed list of integers. The function effectively provides a simple way to identify and collect even numbers.\n\n[end of description]\n"
    },
    "filter_greater_than": {
        "code": "\n\ndef filter_greater_than(numbers, threshold):\n    result = []\n    for number in numbers:\n        if (number > threshold):\n            result.append(number)\n    return result\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of integers and returns a list of integers that are greater than a given threshold value.",
        "description": "\n[description for function: filter_greater_than]\nThis function takes a list of numbers and a threshold value as input. It iterates through each number in the list and checks if it is greater than the specified threshold. If a number exceeds the threshold, it is added to a new list. After processing all the numbers, the function returns the list of numbers that are greater than the threshold. The output is a filtered list containing only the qualifying numbers. This allows users to easily identify values that surpass a certain limit.\n\n[end of description]\n"
    },
    "count_vowels": {
        "code": "\n\ndef count_vowels(input_string):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in input_string:\n        if (char in vowels):\n            count += 1\n    return count\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns the number of vowels in that string.",
        "description": "\n[description for function: count_vowels]\nThis function takes a string as input and counts the number of vowels present in it, considering both uppercase and lowercase letters. It initializes a counter to zero and iterates through each character in the input string. For each character, it checks if it is a vowel by comparing it against a predefined string of vowels. If a vowel is found, the counter is incremented by one. Finally, the function returns the total count of vowels found in the input string.\n\n[end of description]\n"
    },
    "unique_characters": {
        "code": "\n\ndef unique_characters(input_string):\n    unique_chars = set()\n    for char in input_string:\n        unique_chars.add(char)\n    return unique_chars\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns a set of unique characters in that string.",
        "description": "\n[description for function: unique_characters]\nThis function takes a string as input and creates a set to store unique characters from that string. It iterates through each character in the input string, adding it to the set. Since sets automatically handle duplicates, only unique characters are retained. Finally, the function returns the set of unique characters. This allows for easy identification of all distinct characters present in the input string. The output is a collection of characters without any repetitions.\n\n[end of description]\n"
    },
    "is_palindrome": {
        "code": "\n\ndef is_palindrome(s):\n    normalized_str = ''.join((char.lower() for char in s if char.isalnum()))\n    reversed_str = normalized_str[::(- 1)]\n    return (normalized_str == reversed_str)\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns True if it is a palindrome (reads the same forwards and backwards), and False otherwise.",
        "description": "\n[description for function: is_palindrome]\nThis function checks if a given string is a palindrome, meaning it reads the same forwards and backwards. It first normalizes the input by removing non-alphanumeric characters and converting all letters to lowercase. Then, it creates a reversed version of the normalized string. Finally, it compares the normalized string with its reversed counterpart and returns a boolean value indicating whether they are the same.\n\n[end of description]\n"
    },
    "filter_digits": {
        "code": "\n\ndef filter_digits(input_string):\n    result = ''\n    for char in input_string:\n        if char.isdigit():\n            result += char\n    return result\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns a new string containing only the digits from the original string.",
        "description": "\n[description for function: filter_digits]\nThis function takes an input string and iterates through each character to check if it is a digit. If a character is a digit, it appends it to a result string. After processing all characters, it returns the result string containing only the digits found in the input. The function effectively filters out non-digit characters. It ensures that the output consists solely of numeric characters. The final output is a string of concatenated digits extracted from the original input.\n\n[end of description]\n"
    },
    "filter_long_strings": {
        "code": "\n\ndef filter_long_strings(strings, threshold):\n    result = []\n    for string in strings:\n        if (len(string) > threshold):\n            result.append(string)\n    return result\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of strings and returns a new list containing only the strings that have a length greater than a specified threshold.",
        "description": "\n[description for function: filter_long_strings]\nThis function takes a list of strings and a threshold value as input. It iterates through each string in the list and checks if its length exceeds the specified threshold. If a string's length is greater than the threshold, it is added to a result list. After processing all strings, the function returns the list of strings that are longer than the threshold. The output is a filtered list containing only the longer strings. This allows for easy identification of strings that meet the length criteria.\n\n[end of description]\n"
    },
    "sort_strings_by_length_desc": {
        "code": "\n\ndef sort_strings_by_length_desc(strings):\n    return sorted(strings, key=len, reverse=True)\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of strings and returns a new list of those strings sorted by their length in descending order.",
        "description": "\n[description for function: sort_strings_by_length_desc]\nThis function takes a list of strings as input and sorts them in descending order based on their lengths. It utilizes the built-in sorting capabilities of Python, specifying the length of each string as the key for comparison. The result is a new list where the longest strings appear first, followed by shorter strings. If two strings have the same length, their order relative to each other remains unchanged from the original list. The function returns the sorted list without modifying the input. Overall, it effectively organizes strings by their size, making it easy to identify the longest ones.\n\n[end of description]\n"
    },
    "string_lengths": {
        "code": "\n\ndef string_lengths(strings):\n    lengths = []\n    for s in strings:\n        lengths.append(len(s))\n    return lengths\n",
        "dependencies": [],
        "task": "Write a Python function that takes a list of strings and returns a new list containing the lengths of each string in the original list.",
        "description": "\n[description for function: string_lengths]\nThis function takes a list of strings as input and calculates the length of each string. It initializes an empty list to store the lengths. As it iterates through each string in the input list, it appends the length of each string to the lengths list. Finally, it returns the list of lengths. The output is a list of integers representing the lengths of the corresponding strings in the input list. This function effectively provides a way to measure the size of each string in the provided collection.\n\n[end of description]\n"
    },
    "remove_vowels": {
        "code": "\n\ndef remove_vowels(input_string):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in input_string:\n        if (char not in vowels):\n            result += char\n    return result\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns a new string with all the vowels removed.",
        "description": "\n[description for function: remove_vowels]\nThis function takes a string as input and removes all vowels from it, including both uppercase and lowercase letters. It initializes an empty result string to store the characters that are not vowels. As it iterates through each character in the input string, it checks if the character is not a vowel and appends it to the result string if true. Finally, it returns the modified string that contains only the consonants and any other non-vowel characters. The function effectively filters out all vowel characters, providing a consonant-only version of the input. This can be useful for various text processing tasks where vowel removal is desired.\n\n[end of description]\n"
    },
    "count_distinct_characters": {
        "code": "\n\ndef count_distinct_characters(s):\n    distinct_characters = set(s)\n    return len(distinct_characters)\n",
        "dependencies": [],
        "task": "Write a Python function that takes a string and returns the number of distinct characters in that string.",
        "description": "\n[description for function: count_distinct_characters]\nThis function takes a string as input and determines the number of distinct characters present in that string. It achieves this by converting the string into a set, which inherently removes any duplicate characters. The length of this set is then calculated to find the total count of unique characters. Finally, the function returns this count as an integer. This approach efficiently handles the task by leveraging the properties of sets in Python. Overall, it provides a straightforward way to assess character diversity in a given string.\n\n[end of description]\n"
    },
    "merge_dictionaries": {
        "code": "\n\ndef merge_dictionaries(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict\n",
        "dependencies": [],
        "task": "Write a Python function that takes two dictionaries and merges them. If there are duplicate keys, the values from the second dictionary should overwrite those from the first.",
        "description": "\n[description for function: merge_dictionaries]\nThis function takes two dictionaries as input and merges them into a single dictionary. It combines the key-value pairs from both dictionaries, with values from the second dictionary overwriting those from the first in case of key collisions. The resulting merged dictionary is then returned. This approach allows for a straightforward and efficient way to combine data from multiple sources. The function utilizes dictionary unpacking to achieve the merge. Overall, it provides a simple solution for dictionary combination in Python.\n\n[end of description]\n"
    }
}