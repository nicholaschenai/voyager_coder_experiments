{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert amicable_numbers_sum(999)==504\n\nTests failed:\nNone",
    "state": null,
    "code": "\n\ndef sum_of_proper_divisors(n):\n    total = 0\n    for i in range(1, ((n // 2) + 1)):\n        if ((n % i) == 0):\n            total += i\n    return total\n\n\n\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    for num in range(1, (limit + 1)):\n        partner = sum_of_proper_divisors(num)\n        if ((partner != num) and (sum_of_proper_divisors(partner) == num)):\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)\n",
    "full_code": "\n\ndef sum_of_proper_divisors(n):\n    total = 0\n    for i in range(1, ((n // 2) + 1)):\n        if ((n % i) == 0):\n            total += i\n    return total\n\n\n\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    for num in range(1, (limit + 1)):\n        partner = sum_of_proper_divisors(num)\n        if ((partner != num) and (sum_of_proper_divisors(partner) == num)):\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)\n",
    "task_id": "Mbpp/123",
    "success": true,
    "critique": "",
    "reasoning": ""
}